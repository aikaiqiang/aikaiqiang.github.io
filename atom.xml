<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Kaywall</title>
  
  <subtitle>Coding...</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.aikaiqiang.cn/"/>
  <updated>2019-10-30T02:16:17.347Z</updated>
  <id>https://www.aikaiqiang.cn/</id>
  
  <author>
    <name>Kaywall</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Maven 构建 scope 详解</title>
    <link href="https://www.aikaiqiang.cn/2019/10/30/Maven-scope/"/>
    <id>https://www.aikaiqiang.cn/2019/10/30/Maven-scope/</id>
    <published>2019-10-30T01:39:20.000Z</published>
    <updated>2019-10-30T02:16:17.347Z</updated>
    
    <content type="html"><![CDATA[<p>使用Maven构建项目已经很久了，但是经常使用的默认配置向；默认的依赖配置项中，scope的默认值是compile；还有很多其他值都不太清楚具体作用，今天详细学习下 scope 不同值的作用；</p><a id="more"></a><h2 id="Maven-构建中-scope-详解"><a href="#Maven-构建中-scope-详解" class="headerlink" title="Maven 构建中 scope 详解"></a>Maven 构建中 scope 详解</h2><ul><li>Maven 的哲学思想是，约定优于配置（Convention Over Configuration），Maven 依赖中 scope 的默认值是compile</li><li>Scope 指定了依赖（第三方jar包）的 作用范围</li><li>作用范围包括，所在项目的测试、编译、运行、打包等生命周期</li><li>其中，编译和运行还分为<ul><li>测试代码的编译和运行</li><li>非测试代码的编译和运行</li></ul></li></ul><h3 id="scope-的分类"><a href="#scope-的分类" class="headerlink" title="scope 的分类"></a>scope 的分类</h3><h4 id="test-测试范围"><a href="#test-测试范围" class="headerlink" title="test 测试范围"></a>test 测试范围</h4><p>测试范围的依赖（第三方jar包），针对测试相关代码的编译和运行，在通常代码的编译和运行时都不需要，只有在有关测试的代码编译和运行测试代码阶段可用</p><h4 id="compile-编译范围"><a href="#compile-编译范围" class="headerlink" title="compile 编译范围"></a>compile 编译范围</h4><p>依赖默认范围，该依赖需要参与当前项目的编译、测试、运行、打包</p><h4 id="runntime"><a href="#runntime" class="headerlink" title="runntime"></a>runntime</h4><ul><li>表示依赖无需参与当前项目的编译，但是后期的运行和测试需要参与</li><li>与 compile 相比，跳过编译而已</li><li>比如，你可能在编译的时候需要 JDBC API JAR，只有在 运行时才需要 JDBC</li><li>貌似是编译时该包不参与，运行时参与</li></ul><h4 id="provided"><a href="#provided" class="headerlink" title="provided"></a>provided</h4><blockquote><p>打包的时候可以不用包进去，别的设施会提供。事实上该依赖理论上可以参与编译，测试，运行等周期。相当于compile，但是打包阶段做了exclude操作</p></blockquote><ul><li>应用场景是你定义了一个Servlet，此刻得需要Servlet-api.jar 才能编译成功，但是当你达成war 包时，你并不想将 Servlet-api.jar 包进去，因为Tomcat等容器会提供</li><li>跟compile 类似，说明JDK、容器或使用者会提供这个依赖，如Servlet.jar</li><li>这个依赖只作用在** 编译和测试，该依赖会由系统组件提供，不需手动添加，只存在编译、运行、测试阶段，打包是不用包进去，打包阶段做了exclude 动作</li><li>没有传递性</li></ul><h4 id="system"><a href="#system" class="headerlink" title="system"></a>system</h4><p>被依赖项不会从maven仓库下载，而是从本地系统指定路径下寻找，需要 systemPath 属性</p><hr><h3 id="scope-的依赖传递"><a href="#scope-的依赖传递" class="headerlink" title="scope 的依赖传递"></a>scope 的依赖传递</h3><blockquote><p>A -&gt; B -&gt; C, 当前项目 A，A 依赖于 B，B 依赖于 C，知道 B 在 A 中的 scope，怎么知道 C 在 A 中的 scope</p></blockquote><ul><li>A 需不需要 C 的问题，本质由 C 在 B 中的 scope 决定</li><li>当 C 在 B 中的 scope 是 test 或 provided 时，C <strong>直接被丢弃，A 不依赖 C</strong></li><li>否则 A 依赖 C，C 的 scope 继承与 B 的 scope</li></ul><hr><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://www.jianshu.com/p/a9bd44a83dc5" target="_blank" rel="noopener">Maven 依赖中 scope 详解</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用Maven构建项目已经很久了，但是经常使用的默认配置向；默认的依赖配置项中，scope的默认值是compile；还有很多其他值都不太清楚具体作用，今天详细学习下 scope 不同值的作用；&lt;/p&gt;
    
    </summary>
    
      <category term="Maven" scheme="https://www.aikaiqiang.cn/categories/Maven/"/>
    
    
      <category term="Maven" scheme="https://www.aikaiqiang.cn/tags/Maven/"/>
    
  </entry>
  
  <entry>
    <title>Linux 系统管理 firewalld 命令</title>
    <link href="https://www.aikaiqiang.cn/2019/05/17/Linux-manage-firewalld/"/>
    <id>https://www.aikaiqiang.cn/2019/05/17/Linux-manage-firewalld/</id>
    <published>2019-05-17T04:57:59.000Z</published>
    <updated>2019-11-22T08:58:50.953Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>摘要: Linux 系统 firewalld 防火墙</p></blockquote><p><img src="https://raw.githubusercontent.com/aikaiqiang/aikq-blog-comments/master/notepic/christopher-gower-291246-unsplash.jpg" alt=""></p><a id="more"></a><h1 id="Linux-系统管理-firewalld-命令"><a href="#Linux-系统管理-firewalld-命令" class="headerlink" title="Linux 系统管理 firewalld 命令;"></a>Linux 系统管理 firewalld 命令;</h1><p>基于系统：CentOS7</p><h2 id="systemctl-管理-firewalld-服务"><a href="#systemctl-管理-firewalld-服务" class="headerlink" title="systemctl 管理 firewalld 服务"></a>systemctl 管理 firewalld 服务</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启用</span></span><br><span class="line">systemctl start firewalld</span><br><span class="line">     </span><br><span class="line"><span class="comment"># 查看状态</span></span><br><span class="line">systemctl status firewalld</span><br><span class="line">     </span><br><span class="line"><span class="comment"># 停止</span></span><br><span class="line">systemctl <span class="built_in">disable</span> firewalld</span><br><span class="line">     </span><br><span class="line"><span class="comment"># 禁用</span></span><br><span class="line">systemctl stop firewalld</span><br></pre></td></tr></table></figure><h3 id="systemctl-管理"><a href="#systemctl-管理" class="headerlink" title="systemctl 管理"></a>systemctl 管理</h3><p>systemctl 是CentOS7的服务管理工具，融合之前的service和chkconfig的功能于一体<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动一个服务：</span></span><br><span class="line">systemctl start firewalld.service</span><br><span class="line"><span class="comment"># 关闭一个服务：</span></span><br><span class="line">systemctl stop firewalld.service</span><br><span class="line"><span class="comment"># 重启一个服务：</span></span><br><span class="line">systemctl restart firewalld.service</span><br><span class="line"><span class="comment"># 显示一个服务的状态：</span></span><br><span class="line">systemctl status firewalld.service</span><br><span class="line"><span class="comment"># 在开机时启用一个服务：</span></span><br><span class="line">systemctl <span class="built_in">enable</span> firewalld.service</span><br><span class="line"><span class="comment"># 在开机时禁用一个服务：</span></span><br><span class="line">systemctl <span class="built_in">disable</span> firewalld.service</span><br><span class="line"><span class="comment"># 查看服务是否开机启动：s</span></span><br><span class="line">ystemctlis-enabled firewalld.service</span><br><span class="line"><span class="comment"># 查看已启动的服务列表：</span></span><br><span class="line">systemctllist-unit-files | grep enabled</span><br><span class="line"><span class="comment"># 查看启动失败的服务列表：</span></span><br><span class="line">systemctl--failed</span><br></pre></td></tr></table></figure></p><h2 id="配置firewalld-cmd"><a href="#配置firewalld-cmd" class="headerlink" title="配置firewalld-cmd"></a>配置firewalld-cmd</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看版本</span></span><br><span class="line">firewall-cmd --version</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看帮助 </span></span><br><span class="line">firewall-cmd --<span class="built_in">help</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示状态： </span></span><br><span class="line">firewall-cmd --state</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看所有打开的端口： </span></span><br><span class="line">firewall-cmd --zone=public --list-ports</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新防火墙规则： </span></span><br><span class="line">firewall-cmd --reload</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看区域信息:  </span></span><br><span class="line">firewall-cmd--get-active-zones</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看指定接口所属区域： </span></span><br><span class="line">firewall-cmd--get-zone-of-interface=eth0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 拒绝所有包：</span></span><br><span class="line">firewall-cmd --panic-on</span><br><span class="line"></span><br><span class="line"><span class="comment"># 取消拒绝状态： </span></span><br><span class="line">firewall-cmd --panic-off</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看是否拒绝： </span></span><br><span class="line">firewall-cmd --query-panic</span><br></pre></td></tr></table></figure><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># a.添加一个端口 （--permanent永久生效，没有此参数重启后失效）</span></span><br><span class="line">firewall-cmd --zone=public --add-port=80/tcp --permanent</span><br><span class="line"></span><br><span class="line"><span class="comment"># b.重新载入</span></span><br><span class="line">firewall-cmd --reload</span><br><span class="line"></span><br><span class="line"><span class="comment"># c.删除端口</span></span><br><span class="line">firewall-cmd --zone=public --remove-port=6379/tcp --permanent</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看当前开了哪些端口(其实一个服务对应一个端口，每个服务对应/usr/lib/firewalld/services下面一个xml文件)</span></span><br><span class="line">firewall-cmd --list-services</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看所有打开的端口： </span></span><br><span class="line">firewall-cmd --zone=public --list-ports</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新防火墙规则： </span></span><br><span class="line">firewall-cmd --reload</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看还有哪些服务可以打开：</span></span><br><span class="line">firewall-cmd --get-services</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;摘要: Linux 系统 firewalld 防火墙&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/aikaiqiang/aikq-blog-comments/master/notepic/christopher-gower-291246-unsplash.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Linux" scheme="https://www.aikaiqiang.cn/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://www.aikaiqiang.cn/tags/Linux/"/>
    
      <category term="firewalld" scheme="https://www.aikaiqiang.cn/tags/firewalld/"/>
    
  </entry>
  
  <entry>
    <title>Zookeeper学习笔记01</title>
    <link href="https://www.aikaiqiang.cn/2019/05/11/Zookeeper-study-01/"/>
    <id>https://www.aikaiqiang.cn/2019/05/11/Zookeeper-study-01/</id>
    <published>2019-05-11T05:07:19.000Z</published>
    <updated>2019-11-22T08:58:50.953Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>摘要: Zookeeper学习笔记</p></blockquote><p><img src="https://raw.githubusercontent.com/aikaiqiang/aikq-blog-comments/master/notepic/christopher-gower-291246-unsplash.jpg" alt=""><br><a id="more"></a><br>Zookeeper</p><h2 id="安装方式"><a href="#安装方式" class="headerlink" title="安装方式"></a>安装方式</h2><p>zookeeper有单机、伪集群、集群三种部署方式，可根据自己对可靠性的需求选择合适的部署方式</p><h3 id="单机"><a href="#单机" class="headerlink" title="单机"></a>单机</h3><ul><li><p>下载安装文件<br>使用wget工具下载：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget http://mirror.bit.edu.cn/apache/zookeeper/zookeeper-3.4.13/zookeeper-3.4.13.tar.gz</span><br></pre></td></tr></table></figure></li><li><p>解压</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar zxf zookeeper-3.4.13.tar.gz -C /aikq/zookeeper</span><br></pre></td></tr></table></figure></li><li><p>配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 进入安装目录</span></span><br><span class="line">cd /aikq/zookeeper</span><br><span class="line"><span class="meta">#</span><span class="bash"> 创建数据文件和日志文件目录</span></span><br><span class="line">mkdir data</span><br><span class="line">mkdir logs</span><br><span class="line"><span class="meta">#</span><span class="bash"> 进入conf目录下，配置参数文件</span></span><br><span class="line">cp zoo_sample.cfg zoo.cfg</span><br><span class="line"><span class="meta">#</span><span class="bash"> 编辑文件zoo.cfg</span></span><br><span class="line">dataDir=/aikq/zookeeper/zookeeper-3.4.13/data</span><br><span class="line">dataLogDir=/aikq/zookeeper/zookeeper-3.4.13/logs</span><br></pre></td></tr></table></figure></li><li><p>启动和停止</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 进入bin目录</span></span><br><span class="line">./zkServer.sh start</span><br><span class="line">./zkServer.sh stop</span><br><span class="line">./zkServer.sh restart</span><br><span class="line">./zkServer.sh status</span><br></pre></td></tr></table></figure></li></ul><h3 id="伪集群（同一物理机分不同端口部署）"><a href="#伪集群（同一物理机分不同端口部署）" class="headerlink" title="伪集群（同一物理机分不同端口部署）"></a>伪集群（同一物理机分不同端口部署）</h3><h3 id="集群"><a href="#集群" class="headerlink" title="集群"></a>集群</h3><h3 id="ZK-UI-可视化管理"><a href="#ZK-UI-可视化管理" class="headerlink" title="ZK UI 可视化管理"></a>ZK UI 可视化管理</h3><p>gitUrl：<a href="https://github.com/DeemOpen/zkui" target="_blank" rel="noopener">https://github.com/DeemOpen/zkui</a></p><p>–<br>下载地址：<br><a href="http://mirror.bit.edu.cn/apache/zookeeper/zookeeper-3.4.13/zookeeper-3.4.13.tar.gz" target="_blank" rel="noopener">http://mirror.bit.edu.cn/apache/zookeeper/zookeeper-3.4.13/zookeeper-3.4.13.tar.gz</a><br>参考<a href="https://www.cnblogs.com/lsdb/p/7297731.html" target="_blank" rel="noopener">安装教程</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;摘要: Zookeeper学习笔记&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/aikaiqiang/aikq-blog-comments/master/notepic/christopher-gower-291246-unsplash.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Zookeeper" scheme="https://www.aikaiqiang.cn/categories/Zookeeper/"/>
    
    
      <category term="Zookeeper" scheme="https://www.aikaiqiang.cn/tags/Zookeeper/"/>
    
  </entry>
  
  <entry>
    <title>Canal数据同步</title>
    <link href="https://www.aikaiqiang.cn/2019/03/04/Canal-study-01/"/>
    <id>https://www.aikaiqiang.cn/2019/03/04/Canal-study-01/</id>
    <published>2019-03-04T07:33:01.000Z</published>
    <updated>2019-11-22T08:58:50.941Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>背景：阿里巴巴B2B公司存在杭州和美国双机房部署，存在跨机房同步的业务需求，当时早期的数据同步业务， 主要是基于trigger的方式获取增量变更数据；<br>2010开始，阿里开始逐步尝试基于数据库的日志解析，获取增量变更进行同步，由此衍生出增量订阅&amp;消费的业务；<br>定位：基于数据库增量日志准实时解析，提供增量数据订阅&amp;消费（目前主要支持mysql）<br><a id="more"></a></p></blockquote><h2 id="Mysql主从同步原理"><a href="#Mysql主从同步原理" class="headerlink" title="Mysql主从同步原理"></a>Mysql主从同步原理</h2><ul><li><p>架构图：<br><img src="https://raw.githubusercontent.com/aikaiqiang/aikq-blog-comments/master/notepic/%E5%9B%BE%E7%89%871.jpg" alt="图1"><br>Mysql Slave同步原理：<br>a. I/O thread接受binlog<br>b. SQL thread执行变更</p></li><li><p>Binlog Dump交互<br><img src="https://raw.githubusercontent.com/aikaiqiang/aikq-blog-comments/master/notepic/%E5%9B%BE%E7%89%872.png" alt="图2"><br><img src="https://raw.githubusercontent.com/aikaiqiang/aikq-blog-comments/master/notepic/%E5%9B%BE%E7%89%873.png" alt="图3"></p></li></ul><ul><li>Mysql 的binlog <a href="https://dev.mysql.com/doc/internals/en/binary-log.html" target="_blank" rel="noopener">官链</a><h2 id="Canal-使用"><a href="#Canal-使用" class="headerlink" title="Canal 使用"></a>Canal 使用</h2><blockquote><p>canal的原理是基于mysql binlog技术，所以这里一定需要开启mysql的binlog写入功能，建议配置binlog模式为row;</p></blockquote><h3 id="安装Canal-Server"><a href="#安装Canal-Server" class="headerlink" title="安装Canal Server"></a>安装Canal Server</h3></li></ul><ul><li>下载安装包，解压到自定义目录即可；<a href="https://github.com/alibaba/canal/releases" target="_blank" rel="noopener">下载地址</a></li><li><p>修改配置文件，进入canal目录下：<br><img src="https://raw.githubusercontent.com/aikaiqiang/aikq-blog-comments/master/notepic/20190304150020.png" alt="图4"><br>应用参数：<code>vi conf/example/instance.properties</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">#################################################</span><br><span class="line">## mysql serverId , v1.0.26+ will autoGen</span><br><span class="line"># canal.instance.mysql.slaveId=0</span><br><span class="line"></span><br><span class="line"># enable gtid use true/false</span><br><span class="line">canal.instance.gtidon=false</span><br><span class="line"></span><br><span class="line"># position info / 需要改成自己的数据库信息</span><br><span class="line">canal.instance.master.address=127.0.0.1:3306</span><br><span class="line">canal.instance.master.journal.name=</span><br><span class="line">canal.instance.master.position=</span><br><span class="line">canal.instance.master.timestamp=</span><br><span class="line">canal.instance.master.gtid=</span><br><span class="line"></span><br><span class="line"># rds oss binlog</span><br><span class="line">canal.instance.rds.accesskey=</span><br><span class="line">canal.instance.rds.secretkey=</span><br><span class="line">canal.instance.rds.instanceId=</span><br><span class="line"></span><br><span class="line"># table meta tsdb info</span><br><span class="line">canal.instance.tsdb.enable=true</span><br><span class="line">#canal.instance.tsdb.url=jdbc:mysql://127.0.0.1:3306/canal_tsdb</span><br><span class="line">#canal.instance.tsdb.dbUsername=canal</span><br><span class="line">#canal.instance.tsdb.dbPassword=canal</span><br><span class="line"></span><br><span class="line">#canal.instance.standby.address =</span><br><span class="line">#canal.instance.standby.journal.name =</span><br><span class="line">#canal.instance.standby.position =</span><br><span class="line">#canal.instance.standby.timestamp =</span><br><span class="line">#canal.instance.standby.gtid=</span><br><span class="line"></span><br><span class="line"># username/password, 需要改成自己的数据库信息</span><br><span class="line">canal.instance.dbUsername=canal</span><br><span class="line">canal.instance.dbPassword=canal</span><br><span class="line">canal.instance.connectionCharset = UTF-8</span><br><span class="line">canal.instance.defaultDatabaseName =test</span><br><span class="line"># enable druid Decrypt database password</span><br><span class="line">canal.instance.enableDruid=false</span><br><span class="line">#canal.instance.pwdPublicKey=MFwwDQYJKoZIhvcNAQEBBQADSwAwSAJBALK4BUxdDltRRE5/zXpVEVPUgunvscYFtEip3pmLlhrWpacX7y7GCMo2/JM6LeHmiiNdH1FWgGCpUfircSwlWKUCAwEAAQ==</span><br><span class="line"></span><br><span class="line"># table regex</span><br><span class="line">canal.instance.filter.regex=.*\\..*</span><br><span class="line"># table black regex</span><br><span class="line">canal.instance.filter.black.regex=</span><br><span class="line"></span><br><span class="line"># mq config</span><br><span class="line">canal.mq.topic=example</span><br><span class="line"># dynamic topic route by table regex</span><br><span class="line">#canal.mq.dynamicTopic=.*,mytest\\..*,mytest2.user</span><br><span class="line">canal.mq.partition=0</span><br><span class="line"># hash partition config</span><br><span class="line">#canal.mq.partitionsNum=3</span><br><span class="line">#canal.mq.partitionHash=test.table:id^name,.*\\..*</span><br><span class="line">#################################################</span><br></pre></td></tr></table></figure></li><li><p>启动canal<br>命令：<code>sh bin/startup.sh</code> #启动  <code>sh bin/stop.sh</code># 停止</p></li><li><p>查看日志<br>命令：<code>tail -f logs/example/example.log</code></p></li></ul><h3 id="Canal-客户端使用"><a href="#Canal-客户端使用" class="headerlink" title="Canal 客户端使用"></a>Canal 客户端使用</h3><p><a href="https://github.com/alibaba/canal/wiki/ClientExample" target="_blank" rel="noopener">参考地址</a></p><h2 id="Canal-HA模式"><a href="#Canal-HA模式" class="headerlink" title="Canal HA模式"></a>Canal HA模式</h2><ul><li>Canal的ha分为两部分，canal server和canal client分别有对应的ha实现：</li></ul><ol><li>canal server:  为了减少对mysql dump的请求，不同server上的instance要求同一时间只能有一个处于running，其他的处于standby状态;</li><li>canal client: 为了保证有序性，一份instance同一时间只能由一个canal client进行get/ack/rollback操作，否则客户端接收无法保证有序</li></ol><ul><li>HA机制的控制主要是依赖了zookeeper的几个特性，watcher和EPHEMERAL节点(和session生命周期绑定)<h2 id="Canal-Kafka-RocketMQ-QuickStart"><a href="#Canal-Kafka-RocketMQ-QuickStart" class="headerlink" title="Canal Kafka RocketMQ QuickStart"></a>Canal Kafka RocketMQ QuickStart</h2></li></ul><h2 id="资料文件"><a href="#资料文件" class="headerlink" title="资料文件"></a>资料文件</h2><p>Canal介绍PPT：<a href="https://raw.githubusercontent.com/aikaiqiang/aikq-blog-comments/master/canal%E4%BA%A7%E5%93%81%E4%BB%8B%E7%BB%8D.pptx" target="_blank" rel="noopener">下载地址</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;背景：阿里巴巴B2B公司存在杭州和美国双机房部署，存在跨机房同步的业务需求，当时早期的数据同步业务， 主要是基于trigger的方式获取增量变更数据；&lt;br&gt;2010开始，阿里开始逐步尝试基于数据库的日志解析，获取增量变更进行同步，由此衍生出增量订阅&amp;amp;消费的业务；&lt;br&gt;定位：基于数据库增量日志准实时解析，提供增量数据订阅&amp;amp;消费（目前主要支持mysql）&lt;br&gt;
    
    </summary>
    
      <category term="Canal" scheme="https://www.aikaiqiang.cn/categories/Canal/"/>
    
    
      <category term="Canal" scheme="https://www.aikaiqiang.cn/tags/Canal/"/>
    
      <category term="Mysql" scheme="https://www.aikaiqiang.cn/tags/Mysql/"/>
    
  </entry>
  
  <entry>
    <title>Flink学习笔记 01</title>
    <link href="https://www.aikaiqiang.cn/2019/02/26/Flink-study-01/"/>
    <id>https://www.aikaiqiang.cn/2019/02/26/Flink-study-01/</id>
    <published>2019-02-26T08:08:09.000Z</published>
    <updated>2019-02-26T08:27:59.204Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>摘要: Flink学习笔记</p></blockquote><p><img src="https://raw.githubusercontent.com/aikaiqiang/aikq-blog-comments/master/notepic/StockSnap_T2VQ2QPA3R.jpg" alt=""><br><a id="more"></a><br>Flink-Studying<br><a href="https://flink.apache.org/" target="_blank" rel="noopener">官网</a><br><a href="http://flink-cn.shinonomelab.com/" target="_blank" rel="noopener">翻译文档1.6</a><br><a href="https://flink.sojb.cn/" target="_blank" rel="noopener">翻译文档1.7</a><br>Base on：已经安装好JDK环境</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="windows环境"><a href="#windows环境" class="headerlink" title="windows环境"></a>windows环境</h3><ul><li><p>下载资源文件，<a href="https://flink.apache.org/downloads.html" target="_blank" rel="noopener">地址</a><br>下载对应的安装包，解压即可使用，进入bin目录下，点击bat后缀文件即可启动</p></li><li><p>设置环境变量<br>FLINK_HOME：flink解压目录  #配置Path，增加 %FLINK_HOME%\bin<br>FLINK_CONF_DIR: flink配置文件夹conf目录</p></li><li><p>查看版本：<code>flink --version</code></p></li><li><p>启动flink<br>进入bin目录下，点击运行 start-cluster.bat；弹出日志输出窗口<br>浏览器输入：local host:8081 如图：<br><img src="https://raw.githubusercontent.com/aikaiqiang/aikq-blog-comments/master/notepic/20190222171343.png" alt=""></p></li></ul><h3 id="linux环境"><a href="#linux环境" class="headerlink" title="linux环境"></a>linux环境</h3><p>待补充···</p><h2 id="编写本地流处理demo"><a href="#编写本地流处理demo" class="headerlink" title="编写本地流处理demo"></a>编写本地流处理demo</h2><h3 id="新建flink-demo项目"><a href="#新建flink-demo项目" class="headerlink" title="新建flink-demo项目"></a>新建flink-demo项目</h3><p>IDEA new project 选择maven项目，如图：<br><img src="https://raw.githubusercontent.com/aikaiqiang/aikq-blog-comments/master/notepic/20190222171900.png" alt=""></p><h3 id="编写测试类"><a href="#编写测试类" class="headerlink" title="编写测试类"></a>编写测试类</h3><p>新建类文件SocketTextStreamWordCount.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.aikq.flink;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.flink.api.common.functions.FlatMapFunction;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.api.java.tuple.Tuple2;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.datastream.DataStreamSource;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.datastream.SingleOutputStreamOperator;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.util.Collector;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  E</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> aikq</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019年02月22日 14:47</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SocketTextStreamWordCount</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="comment">// 参数校验</span></span><br><span class="line"><span class="keyword">if</span> (args.length != <span class="number">2</span>)&#123;</span><br><span class="line">System.out.println(<span class="string">"USAGE:\nSocketTextStreamWordCount &lt;hostname&gt; &lt;port&gt;"</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">String hostname = args[<span class="number">0</span>];</span><br><span class="line">Integer port = Integer.parseInt(args[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取数据</span></span><br><span class="line">DataStreamSource&lt;String&gt; stream = env.socketTextStream(hostname, port);</span><br><span class="line"></span><br><span class="line"><span class="comment">//计数</span></span><br><span class="line">SingleOutputStreamOperator&lt;Tuple2&lt;String, Integer&gt;&gt; sum = stream.flatMap(<span class="keyword">new</span> LineSplitter())</span><br><span class="line">.keyBy(<span class="number">0</span>)</span><br><span class="line">.sum(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">sum.print();</span><br><span class="line"></span><br><span class="line">env.execute(<span class="string">"Java WordCount from SocketTextStream Demo"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">LineSplitter</span> <span class="keyword">implements</span> <span class="title">FlatMapFunction</span>&lt;<span class="title">String</span>, <span class="title">Tuple2</span>&lt;<span class="title">String</span>, <span class="title">Integer</span>&gt;&gt; </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">flatMap</span><span class="params">(String s, Collector&lt;Tuple2&lt;String, Integer&gt;&gt; collector)</span> </span>&#123;</span><br><span class="line">String[] tokens = s.toLowerCase().split(<span class="string">"\\W+"</span>);</span><br><span class="line"><span class="keyword">for</span> (String token: tokens) &#123;</span><br><span class="line"><span class="keyword">if</span> (token.length() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">collector.collect(<span class="keyword">new</span> Tuple2&lt;String, Integer&gt;(token, <span class="number">1</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="打包编译"><a href="#打包编译" class="headerlink" title="打包编译"></a>打包编译</h3><p>在项目根目录下，使用命令打包：<code>mvn clean package -Dmaven.test.skip=true</code></p><p>或者利用IDE，如图：<br><img src="https://raw.githubusercontent.com/aikaiqiang/aikq-blog-comments/master/notepic/20190222172615.png" alt=""><br>1：忽略单元测试<br>package：执行打包命令，生成jar包，如图：<br><img src="https://raw.githubusercontent.com/aikaiqiang/aikq-blog-comments/master/notepic/20190222175501.png" alt=""></p><h3 id="开启本地监听端口"><a href="#开启本地监听端口" class="headerlink" title="开启本地监听端口"></a>开启本地监听端口</h3><p>windows需要安装netcat，<a href="https://eternallybored.org/misc/netcat/" target="_blank" rel="noopener">下载地址</a></p><ul><li>下载安装包</li><li>解压</li><li>nc命令<br>Windows OS环境下使用nc命令，实现TCP方式监听服务器端9000端口<br>服务器端命令：<code>nc.exe -l -p [端口号]</code><br>客户端命令：<code>nc.exe [服务器端IP地址] [端口号]</code><br>Windows OS环境下使用nc命令，实现UDP方式监听服务器端9000端口<br>服务器端命令：<code>nc.exe -lu -p [端口号]</code><br>客户端命令：<code>nc.exe -u [服务器端IP地址] [端口号]</code><br>如下图：<br><img src="https://raw.githubusercontent.com/aikaiqiang/aikq-blog-comments/master/notepic/20190222174153.png" alt=""></li></ul><h2 id="flink运行flink-demo-jar"><a href="#flink运行flink-demo-jar" class="headerlink" title="flink运行flink-demo.jar"></a>flink运行flink-demo.jar</h2><p>打开cmd，执行命令<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flink run -c com.aikq.flink.SocketTextStreamWordCount flink-demo-1.0-SNAPSHOT.jar 127.0.0.1 9000</span><br></pre></td></tr></table></figure></p><p><code>com.aikq.flink.SocketTextStreamWordCount</code>必须是对应类含包名的全路径<br>运行成功后可以在flink管理界面看到新增一个job，如图：<br><img src="https://raw.githubusercontent.com/aikaiqiang/aikq-blog-comments/master/notepic/20190222175135.png" alt=""></p><p>然后再nc监听的9000端口窗口输入测试字符串，在日志窗口有对应输出，如图：<br><img src="https://raw.githubusercontent.com/aikaiqiang/aikq-blog-comments/master/notepic/20190222175032.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;摘要: Flink学习笔记&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/aikaiqiang/aikq-blog-comments/master/notepic/StockSnap_T2VQ2QPA3R.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="flink" scheme="https://www.aikaiqiang.cn/categories/flink/"/>
    
    
      <category term="flink" scheme="https://www.aikaiqiang.cn/tags/flink/"/>
    
  </entry>
  
  <entry>
    <title>Knowledge-overview</title>
    <link href="https://www.aikaiqiang.cn/2019/02/22/Knowledge-overview/"/>
    <id>https://www.aikaiqiang.cn/2019/02/22/Knowledge-overview/</id>
    <published>2019-02-22T05:06:28.000Z</published>
    <updated>2019-02-26T08:15:45.040Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><a href="http://www.iocoder.cn/" target="_blank" rel="noopener">知识总览来源</a></p></blockquote><p><img src="https://raw.githubusercontent.com/aikaiqiang/aikq-blog-comments/master/wallpaper/alone-boulders-idyllic-426893.jpg" alt=""></p><a id="more"></a><h3 id="API网关"><a href="#API网关" class="headerlink" title="API网关"></a>API网关</h3><h4 id="Spring-Cloud-Gateway"><a href="#Spring-Cloud-Gateway" class="headerlink" title="Spring Cloud Gateway"></a>Spring Cloud Gateway</h4><h4 id="Zuul"><a href="#Zuul" class="headerlink" title="Zuul"></a>Zuul</h4><h4 id="Kong"><a href="#Kong" class="headerlink" title="Kong"></a>Kong</h4><h3 id="服务调用"><a href="#服务调用" class="headerlink" title="服务调用"></a>服务调用</h3><h4 id="Dubbo"><a href="#Dubbo" class="headerlink" title="Dubbo"></a>Dubbo</h4><h4 id="SOFA-RPC"><a href="#SOFA-RPC" class="headerlink" title="SOFA RPC"></a>SOFA RPC</h4><h4 id="Motan"><a href="#Motan" class="headerlink" title="Motan"></a>Motan</h4><h4 id="Ribbon"><a href="#Ribbon" class="headerlink" title="Ribbon"></a>Ribbon</h4><h3 id="消息队列"><a href="#消息队列" class="headerlink" title="消息队列"></a>消息队列</h3><h4 id="RocketMQ"><a href="#RocketMQ" class="headerlink" title="RocketMQ"></a>RocketMQ</h4><h4 id="Kafka"><a href="#Kafka" class="headerlink" title="Kafka"></a>Kafka</h4><h4 id="RabbitMQ"><a href="#RabbitMQ" class="headerlink" title="RabbitMQ"></a>RabbitMQ</h4><h4 id="ActiveMQ"><a href="#ActiveMQ" class="headerlink" title="ActiveMQ"></a>ActiveMQ</h4><h3 id="作业调度（Job）"><a href="#作业调度（Job）" class="headerlink" title="作业调度（Job）"></a>作业调度（Job）</h3><h4 id="Elastic-Job-Lite"><a href="#Elastic-Job-Lite" class="headerlink" title="Elastic Job Lite"></a>Elastic Job Lite</h4><h4 id="Elastic-Job-Cloud"><a href="#Elastic-Job-Cloud" class="headerlink" title="Elastic Job Cloud"></a>Elastic Job Cloud</h4><h4 id="Quartz"><a href="#Quartz" class="headerlink" title="Quartz"></a>Quartz</h4><h4 id="XXL-Job"><a href="#XXL-Job" class="headerlink" title="XXL-Job"></a>XXL-Job</h4><h3 id="注册中心"><a href="#注册中心" class="headerlink" title="注册中心"></a>注册中心</h3><h4 id="Eureka"><a href="#Eureka" class="headerlink" title="Eureka"></a>Eureka</h4><h4 id="Zookeeper"><a href="#Zookeeper" class="headerlink" title="Zookeeper"></a>Zookeeper</h4><h4 id="Nacos"><a href="#Nacos" class="headerlink" title="Nacos"></a>Nacos</h4><h4 id="Consul-Etcd"><a href="#Consul-Etcd" class="headerlink" title="Consul Etcd"></a>Consul Etcd</h4><h3 id="配置中心"><a href="#配置中心" class="headerlink" title="配置中心"></a>配置中心</h3><h4 id="Apollo"><a href="#Apollo" class="headerlink" title="Apollo"></a>Apollo</h4><h4 id="Nacos-1"><a href="#Nacos-1" class="headerlink" title="Nacos"></a>Nacos</h4><h4 id="Spring-Cloud-Config"><a href="#Spring-Cloud-Config" class="headerlink" title="Spring Cloud Config"></a>Spring Cloud Config</h4><h3 id="Disconf"><a href="#Disconf" class="headerlink" title="Disconf"></a>Disconf</h3><h3 id="链路追踪"><a href="#链路追踪" class="headerlink" title="链路追踪"></a>链路追踪</h3><h4 id="SkyWalking"><a href="#SkyWalking" class="headerlink" title="SkyWalking"></a>SkyWalking</h4><h4 id="Zipkin"><a href="#Zipkin" class="headerlink" title="Zipkin"></a>Zipkin</h4><h4 id="Pinpoint"><a href="#Pinpoint" class="headerlink" title="Pinpoint"></a>Pinpoint</h4><h4 id="CAT"><a href="#CAT" class="headerlink" title="CAT"></a>CAT</h4><h3 id="服务保障（熔断-降级）"><a href="#服务保障（熔断-降级）" class="headerlink" title="服务保障（熔断/降级）"></a>服务保障（熔断/降级）</h3><h4 id="Hystrix"><a href="#Hystrix" class="headerlink" title="Hystrix"></a>Hystrix</h4><h4 id="Sentinel"><a href="#Sentinel" class="headerlink" title="Sentinel"></a>Sentinel</h4><h4 id="Resilience4j"><a href="#Resilience4j" class="headerlink" title="Resilience4j"></a>Resilience4j</h4><h3 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h3><h4 id="Netty"><a href="#Netty" class="headerlink" title="Netty"></a>Netty</h4><h4 id="Tomcat"><a href="#Tomcat" class="headerlink" title="Tomcat"></a>Tomcat</h4><h4 id="Jetty"><a href="#Jetty" class="headerlink" title="Jetty"></a>Jetty</h4><h4 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h4><h3 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h3><h4 id="JDK（JUC）"><a href="#JDK（JUC）" class="headerlink" title="JDK（JUC）"></a>JDK（JUC）</h4><h4 id="Java并发"><a href="#Java并发" class="headerlink" title="Java并发"></a>Java并发</h4><h4 id="Java多线程"><a href="#Java多线程" class="headerlink" title="Java多线程"></a>Java多线程</h4><h4 id="JVM"><a href="#JVM" class="headerlink" title="JVM"></a>JVM</h4><h3 id="J2EE"><a href="#J2EE" class="headerlink" title="J2EE"></a>J2EE</h3><h4 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h4><h4 id="Spring-Boot"><a href="#Spring-Boot" class="headerlink" title="Spring Boot"></a>Spring Boot</h4><h4 id="Spring-Cloud"><a href="#Spring-Cloud" class="headerlink" title="Spring Cloud"></a>Spring Cloud</h4><h3 id="Web框架"><a href="#Web框架" class="headerlink" title="Web框架"></a>Web框架</h3><h4 id="Spring-MVC"><a href="#Spring-MVC" class="headerlink" title="Spring MVC"></a>Spring MVC</h4><h4 id="Spring-Security"><a href="#Spring-Security" class="headerlink" title="Spring Security"></a>Spring Security</h4><h4 id="Spring-Webflux"><a href="#Spring-Webflux" class="headerlink" title="Spring Webflux"></a>Spring Webflux</h4><h4 id="Shiro"><a href="#Shiro" class="headerlink" title="Shiro"></a>Shiro</h4><h3 id="ORM框架"><a href="#ORM框架" class="headerlink" title="ORM框架"></a>ORM框架</h3><h4 id="Mybatis"><a href="#Mybatis" class="headerlink" title="Mybatis"></a>Mybatis</h4><h4 id="Hibernate"><a href="#Hibernate" class="headerlink" title="Hibernate"></a>Hibernate</h4><h4 id="Spring-Data-JPA"><a href="#Spring-Data-JPA" class="headerlink" title="Spring Data JPA"></a>Spring Data JPA</h4><h3 id="数据库连接池"><a href="#数据库连接池" class="headerlink" title="数据库连接池"></a>数据库连接池</h3><h4 id="Druid"><a href="#Druid" class="headerlink" title="Druid"></a>Druid</h4><h4 id="HikariCP"><a href="#HikariCP" class="headerlink" title="HikariCP"></a>HikariCP</h4><h3 id="数据库中间件"><a href="#数据库中间件" class="headerlink" title="数据库中间件"></a>数据库中间件</h3><h4 id="Sharding-JDBC"><a href="#Sharding-JDBC" class="headerlink" title="Sharding JDBC"></a>Sharding JDBC</h4><h4 id="Sharding-Sphere"><a href="#Sharding-Sphere" class="headerlink" title="Sharding Sphere"></a>Sharding Sphere</h4><h4 id="MyCAT"><a href="#MyCAT" class="headerlink" title="MyCAT"></a>MyCAT</h4><h4 id="Canal"><a href="#Canal" class="headerlink" title="Canal"></a>Canal</h4><h3 id="分布式事务"><a href="#分布式事务" class="headerlink" title="分布式事务"></a>分布式事务</h3><h4 id="TCC-Transaction"><a href="#TCC-Transaction" class="headerlink" title="TCC Transaction"></a>TCC Transaction</h4><h4 id="Fescar"><a href="#Fescar" class="headerlink" title="Fescar"></a>Fescar</h4><h4 id="Happylifeplat-TCC"><a href="#Happylifeplat-TCC" class="headerlink" title="Happylifeplat TCC"></a>Happylifeplat TCC</h4><h4 id="Myth"><a href="#Myth" class="headerlink" title="Myth"></a>Myth</h4><h3 id="数据库（含NoSql）"><a href="#数据库（含NoSql）" class="headerlink" title="数据库（含NoSql）"></a>数据库（含NoSql）</h3><h4 id="Mysql"><a href="#Mysql" class="headerlink" title="Mysql"></a>Mysql</h4><h4 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h4><h4 id="MongoDB"><a href="#MongoDB" class="headerlink" title="MongoDB"></a>MongoDB</h4><h4 id="TiDB"><a href="#TiDB" class="headerlink" title="TiDB"></a>TiDB</h4><h3 id="搜索引擎"><a href="#搜索引擎" class="headerlink" title="搜索引擎"></a>搜索引擎</h3><h4 id="Lucene"><a href="#Lucene" class="headerlink" title="Lucene"></a>Lucene</h4><h4 id="Elasticsearch"><a href="#Elasticsearch" class="headerlink" title="Elasticsearch"></a>Elasticsearch</h4><h4 id="Solr"><a href="#Solr" class="headerlink" title="Solr"></a>Solr</h4><h3 id="工具类"><a href="#工具类" class="headerlink" title="工具类"></a>工具类</h3><h4 id="Guava"><a href="#Guava" class="headerlink" title="Guava"></a>Guava</h4><h4 id="RxJava"><a href="#RxJava" class="headerlink" title="RxJava"></a>RxJava</h4><h3 id="容器服务"><a href="#容器服务" class="headerlink" title="容器服务"></a>容器服务</h3><h4 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h4><h4 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h4><h4 id="Kubernetes"><a href="#Kubernetes" class="headerlink" title="Kubernetes"></a>Kubernetes</h4><h4 id="Swarm"><a href="#Swarm" class="headerlink" title="Swarm"></a>Swarm</h4><h3 id="集群管理工具"><a href="#集群管理工具" class="headerlink" title="集群管理工具"></a>集群管理工具</h3><h4 id="Racher"><a href="#Racher" class="headerlink" title="Racher"></a>Racher</h4><h4 id="OpenStack"><a href="#OpenStack" class="headerlink" title="OpenStack"></a>OpenStack</h4><h3 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h3><h4 id="Jenkins"><a href="#Jenkins" class="headerlink" title="Jenkins"></a>Jenkins</h4><h4 id="Travis-CI"><a href="#Travis-CI" class="headerlink" title="Travis CI"></a>Travis CI</h4><h4 id="Coding"><a href="#Coding" class="headerlink" title="Coding"></a>Coding</h4><h4 id="Azure-DevOps"><a href="#Azure-DevOps" class="headerlink" title="Azure DevOps"></a>Azure DevOps</h4><h3 id="开发"><a href="#开发" class="headerlink" title="开发"></a>开发</h3><h4 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h4><h4 id="Maven"><a href="#Maven" class="headerlink" title="Maven"></a>Maven</h4><h4 id="Jenkins（CI-CD持续集成）"><a href="#Jenkins（CI-CD持续集成）" class="headerlink" title="Jenkins（CI/CD持续集成）"></a>Jenkins（CI/CD持续集成）</h4><h4 id="IDE-idea-eclipse"><a href="#IDE-idea-eclipse" class="headerlink" title="IDE(idea,eclipse)"></a>IDE(idea,eclipse)</h4><h3 id="前端框架"><a href="#前端框架" class="headerlink" title="前端框架"></a>前端框架</h3><h4 id="React"><a href="#React" class="headerlink" title="React"></a>React</h4><h4 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h4><h4 id="Angular"><a href="#Angular" class="headerlink" title="Angular"></a>Angular</h4><h3 id="大数据"><a href="#大数据" class="headerlink" title="大数据"></a>大数据</h3><h4 id="HBase"><a href="#HBase" class="headerlink" title="HBase"></a>HBase</h4><h4 id="Hive"><a href="#Hive" class="headerlink" title="Hive"></a>Hive</h4><h4 id="Spark"><a href="#Spark" class="headerlink" title="Spark"></a>Spark</h4><h4 id="Flink"><a href="#Flink" class="headerlink" title="Flink"></a>Flink</h4><h3 id="其他语言"><a href="#其他语言" class="headerlink" title="其他语言"></a>其他语言</h3><h4 id="Go"><a href="#Go" class="headerlink" title="Go"></a>Go</h4><h4 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h4>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http://www.iocoder.cn/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;知识总览来源&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/aikaiqiang/aikq-blog-comments/master/wallpaper/alone-boulders-idyllic-426893.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="technology" scheme="https://www.aikaiqiang.cn/tags/technology/"/>
    
  </entry>
  
  <entry>
    <title>Git上传本地项目到远程仓库</title>
    <link href="https://www.aikaiqiang.cn/2019/02/19/Git-push-remote/"/>
    <id>https://www.aikaiqiang.cn/2019/02/19/Git-push-remote/</id>
    <published>2019-02-19T09:07:46.000Z</published>
    <updated>2019-11-22T08:58:50.949Z</updated>
    
    <content type="html"><![CDATA[<h3 id="初始化本地仓库"><a href="#初始化本地仓库" class="headerlink" title="初始化本地仓库"></a>初始化本地仓库</h3><ul><li>初始化目录<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 初始化目录</span></span><br><span class="line">git init</span><br><span class="line"><span class="comment"># 查看你当前目录下文件状态</span></span><br><span class="line">git status</span><br><span class="line"><span class="comment"># git add把项目添加到仓库</span></span><br><span class="line">git add .</span><br><span class="line"><span class="comment"># git commit 提交文件到本地仓库</span></span><br><span class="line">git commit -m <span class="string">"提交备注"</span></span><br></pre></td></tr></table></figure></li></ul><a id="more"></a><h3 id="创建SSH-KEY-链接远程仓库"><a href="#创建SSH-KEY-链接远程仓库" class="headerlink" title="创建SSH KEY 链接远程仓库"></a>创建SSH KEY 链接远程仓库</h3><ul><li>本地生成ssh key<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">"youremail@example.com"</span></span><br></pre></td></tr></table></figure></li></ul><p>当前用户.ssh目录里找到id_rsa和id_rsa.pub这两个文件，将id_rsa.pub文件内容添加到gitHub的Settings下SSH KEY</p><h3 id="在远程仓库创建一个用来存储代码的仓库"><a href="#在远程仓库创建一个用来存储代码的仓库" class="headerlink" title="在远程仓库创建一个用来存储代码的仓库"></a>在远程仓库创建一个用来存储代码的仓库</h3><ul><li><p>本地关联远程仓库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin https://github.com/aikaiqiang/myLittleApp.git</span><br></pre></td></tr></table></figure></li><li><p>本地仓库内容推到远程仓库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 由于新建的远程仓库是空的，所以要加上-u这个参数，等远程仓库里面有了内容之后；</span></span><br><span class="line">git push -u origin master</span><br><span class="line"><span class="comment"># 下次再从本地库上传内容的时候只需下面命令：</span></span><br><span class="line">git push origin master</span><br></pre></td></tr></table></figure></li></ul><p>如果push失败，==可能是远程仓库有文件readme.md==，建议先合并远程仓库内容到本地再push<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull --rebase origin master</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;初始化本地仓库&quot;&gt;&lt;a href=&quot;#初始化本地仓库&quot; class=&quot;headerlink&quot; title=&quot;初始化本地仓库&quot;&gt;&lt;/a&gt;初始化本地仓库&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;初始化目录&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 初始化目录&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git init&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 查看你当前目录下文件状态&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git status&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# git add把项目添加到仓库&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git add .&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# git commit 提交文件到本地仓库&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git commit -m &lt;span class=&quot;string&quot;&gt;&quot;提交备注&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Git" scheme="https://www.aikaiqiang.cn/categories/Git/"/>
    
    
      <category term="Git" scheme="https://www.aikaiqiang.cn/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Harbor修改端口号</title>
    <link href="https://www.aikaiqiang.cn/2018/10/12/Harbor-setting/"/>
    <id>https://www.aikaiqiang.cn/2018/10/12/Harbor-setting/</id>
    <published>2018-10-12T09:15:39.000Z</published>
    <updated>2019-11-22T08:58:50.949Z</updated>
    
    <content type="html"><![CDATA[<p>背景：之前安装Harbor时默认安装的，服务端口默认占用80和443，后来有同事要用到80端口，为了满足同时的需求，不得不麻烦自己修改端口了。</p><h3 id="修改docker-compose-yml文件端口映射为1180-gt-80"><a href="#修改docker-compose-yml文件端口映射为1180-gt-80" class="headerlink" title="修改docker-compose.yml文件端口映射为1180 &gt; 80:"></a>修改docker-compose.yml文件端口映射为1180 &gt; 80:</h3><p>在Harbor路径下找到文件 docker-compose.yml，我本地路径是 /usr/local/harbor</p><a id="more"></a><p>编辑文件：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># vim docker-compose.yml</span></span><br><span class="line">proxy:</span><br><span class="line">    image: vmware/nginx-photon:1.11.13</span><br><span class="line">    container_name: nginx</span><br><span class="line">    restart: always</span><br><span class="line">    volumes:</span><br><span class="line">      - ./common/config/nginx:/etc/nginx:z</span><br><span class="line">    networks:</span><br><span class="line">      - harbor</span><br><span class="line">    ports:</span><br><span class="line">      - 8088:80</span><br><span class="line">      - 443:443</span><br><span class="line">      - 4443:4443</span><br><span class="line">    depends_on:</span><br><span class="line">      - mysql</span><br><span class="line">      - registry</span><br><span class="line">      - ui</span><br><span class="line">      - <span class="built_in">log</span></span><br><span class="line">    logging:</span><br><span class="line">      driver: <span class="string">"syslog"</span></span><br><span class="line">      options:</span><br><span class="line">        syslog-address: <span class="string">"tcp://127.0.0.1:1514"</span></span><br><span class="line">        tag: <span class="string">"proxy"</span></span><br></pre></td></tr></table></figure></p><h3 id="修改common-templates-registry-config-yml文件仓库地址"><a href="#修改common-templates-registry-config-yml文件仓库地址" class="headerlink" title="修改common/templates/registry/config.yml文件仓库地址"></a>修改common/templates/registry/config.yml文件仓库地址</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># vim common/templates/registry/config.yml</span></span><br><span class="line"><span class="comment"># 找到如下地方，添加端口号</span></span><br><span class="line">auth:</span><br><span class="line">  token:</span><br><span class="line">    issuer: harbor-token-issuer</span><br><span class="line">    realm: <span class="variable">$ui_url</span>:8088/service/token</span><br><span class="line">    rootcertbundle: /etc/registry/root.crt</span><br><span class="line">    service: harbor-registry</span><br></pre></td></tr></table></figure><h3 id="停止harbor，重新启动并生成配置文件"><a href="#停止harbor，重新启动并生成配置文件" class="headerlink" title="停止harbor，重新启动并生成配置文件"></a>停止harbor，重新启动并生成配置文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># docker-compose stop</span></span><br><span class="line"><span class="comment"># ./install.sh</span></span><br></pre></td></tr></table></figure><h3 id="遇到问题："><a href="#遇到问题：" class="headerlink" title="遇到问题："></a>遇到问题：</h3><ol><li>停止服务后，在生成配置文件的时候，无法删除容器，提示“磁盘在忙”，由于容器挂载数据卷，无法直接删除。<blockquote><p>解决：先查出进程ID 进行杀掉，然后再删除：</p></blockquote></li></ol><p>代码：（example）<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">grep c413f59ac6f0395634567891119784ad3ec61aad98892624395b57388beb3dae /proc/*/mountinfo</span><br><span class="line"><span class="built_in">kill</span> -9 进程ID</span><br></pre></td></tr></table></figure></p><p>重新运行 <code>install.sh</code></p><p>参考地址：</p><ul><li><a href="https://www.cnblogs.com/huangjc/p/6420355.html" target="_blank" rel="noopener">https://www.cnblogs.com/huangjc/p/6420355.html</a></li><li><a href="https://www.cnblogs.com/zhink/p/9244917.html" target="_blank" rel="noopener">https://www.cnblogs.com/zhink/p/9244917.html</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;背景：之前安装Harbor时默认安装的，服务端口默认占用80和443，后来有同事要用到80端口，为了满足同时的需求，不得不麻烦自己修改端口了。&lt;/p&gt;
&lt;h3 id=&quot;修改docker-compose-yml文件端口映射为1180-gt-80&quot;&gt;&lt;a href=&quot;#修改docker-compose-yml文件端口映射为1180-gt-80&quot; class=&quot;headerlink&quot; title=&quot;修改docker-compose.yml文件端口映射为1180 &amp;gt; 80:&quot;&gt;&lt;/a&gt;修改docker-compose.yml文件端口映射为1180 &amp;gt; 80:&lt;/h3&gt;&lt;p&gt;在Harbor路径下找到文件 docker-compose.yml，我本地路径是 /usr/local/harbor&lt;/p&gt;
    
    </summary>
    
      <category term="Docker" scheme="https://www.aikaiqiang.cn/categories/Docker/"/>
    
    
      <category term="Docker" scheme="https://www.aikaiqiang.cn/tags/Docker/"/>
    
      <category term="Harbor" scheme="https://www.aikaiqiang.cn/tags/Harbor/"/>
    
      <category term="Docker Registry" scheme="https://www.aikaiqiang.cn/tags/Docker-Registry/"/>
    
  </entry>
  
  <entry>
    <title>本地Docker镜像仓库Harbor搭建</title>
    <link href="https://www.aikaiqiang.cn/2018/10/11/Docker-harbor/"/>
    <id>https://www.aikaiqiang.cn/2018/10/11/Docker-harbor/</id>
    <published>2018-10-11T07:40:50.000Z</published>
    <updated>2019-11-22T08:58:50.941Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>摘要：Harbor是一个用于存储和分发Docker镜像的企业级Registry服务器，通过添加一些企业必需的功能特性</p></blockquote><h3 id="关于Harbor"><a href="#关于Harbor" class="headerlink" title="关于Harbor"></a>关于Harbor</h3><p>Harbor是一个用于存储和分发Docker镜像的企业级Registry服务器，通过添加一些企业必需的功能特性，例如安全、标识和管理等，扩展了开源Docker Distribution。作为一个企业级私有Registry服务器，Harbor提供了更好的性能和安全。提升用户使用Registry构建和运行环境传输镜像的效率。Harbor支持安装在多个Registry节点的镜像资源复制，镜像全部保存在私有Registry中， 确保数据和知识产权在公司内部网络中管控。另外，Harbor也提供了高级的安全特性，诸如用户管理，访问控制和活动审计等 ；</p><a id="more"></a><h3 id="安装Harbor"><a href="#安装Harbor" class="headerlink" title="安装Harbor"></a>安装Harbor</h3><p>安装环境：CentOS Linux release 7.2.1511 (Core )</p><h4 id="安装Docker"><a href="#安装Docker" class="headerlink" title="安装Docker"></a>安装Docker</h4><h4 id="安装Docker-Compose"><a href="#安装Docker-Compose" class="headerlink" title="安装Docker-Compose"></a>安装Docker-Compose</h4><ul><li>二进制安装</li><li>pip安装</li></ul><h4 id="安装Harbor-1"><a href="#安装Harbor-1" class="headerlink" title="安装Harbor"></a>安装Harbor</h4><h5 id="在线安装"><a href="#在线安装" class="headerlink" title="在线安装"></a>在线安装</h5><h6 id="下载文件："><a href="#下载文件：" class="headerlink" title="下载文件："></a>下载文件：</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -P /usr/local/src/     https://github.com/vmware/harbor/releases/download/v1.2.0/harbor-online-installer-v1.2.0.tgz</span><br></pre></td></tr></table></figure><h6 id="解压文件："><a href="#解压文件：" class="headerlink" title="解压文件："></a>解压文件：</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar zxf harbor-online-installer-v1.2.0.tgz  -C /usr/local/</span><br></pre></td></tr></table></figure><h6 id="修改配置文件："><a href="#修改配置文件：" class="headerlink" title="修改配置文件："></a>修改配置文件：</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/harbor/</span><br><span class="line">vim harbor.cfg</span><br><span class="line"># 域名设置</span><br><span class="line">hostname = reg.hancloud.cn</span><br><span class="line"># 邮箱设置</span><br><span class="line">email_server = smtp.hancloud.cn</span><br><span class="line">email_server_port = 25</span><br><span class="line">email_username = aikaiqiang@hancloud.cn</span><br><span class="line">email_password = @akq930210</span><br><span class="line">email_from = aikaiqiang &lt;aikaiqiang@hancloud.cn&gt;</span><br><span class="line">email_ssl = false</span><br><span class="line"># 禁止用户注册</span><br><span class="line">self_registration = off</span><br><span class="line"></span><br><span class="line"># 设置只有管理员可以创建项目</span><br><span class="line">project_creation_restriction = adminonly</span><br></pre></td></tr></table></figure><h6 id="执行安装脚本："><a href="#执行安装脚本：" class="headerlink" title="执行安装脚本："></a>执行安装脚本：</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line">./install.sh</span><br><span class="line"># 执行过程</span><br><span class="line">[Step 0]: checking installation environment ...</span><br><span class="line"></span><br><span class="line">Note: docker version: 1.13.1</span><br><span class="line"></span><br><span class="line">Note: docker-compose version: 1.22.0</span><br><span class="line">      </span><br><span class="line">[Step 1]: preparing environment ...</span><br><span class="line">Generated and saved secret to file: /data/secretkey</span><br><span class="line">Generated configuration file: ./common/config/nginx/nginx.conf</span><br><span class="line">Generated configuration file: ./common/config/adminserver/env</span><br><span class="line">Generated configuration file: ./common/config/ui/env</span><br><span class="line">Generated configuration file: ./common/config/registry/config.yml</span><br><span class="line">Generated configuration file: ./common/config/db/env</span><br><span class="line">Generated configuration file: ./common/config/jobservice/env</span><br><span class="line">Generated configuration file: ./common/config/jobservice/app.conf</span><br><span class="line">Generated configuration file: ./common/config/ui/app.conf</span><br><span class="line">Generated certificate, key file: ./common/config/ui/private_key.pem, cert file: ./common/config/registry/root.crt</span><br><span class="line">The configuration files are ready, please use docker-compose to start the service.</span><br><span class="line">  </span><br><span class="line">[Step 2]: checking existing instance of Harbor ...</span><br><span class="line">    </span><br><span class="line">[Step 3]: starting Harbor ...</span><br><span class="line">Creating network &quot;harbor_harbor&quot; with the default driver</span><br><span class="line">Pulling log (vmware/harbor-log:v1.2.0)...</span><br><span class="line">Trying to pull repository docker.io/vmware/harbor-log ... </span><br><span class="line">v1.2.0: Pulling from docker.io/vmware/harbor-log</span><br><span class="line">93b3dcee11d6: Pull complete</span><br><span class="line">07d028a1dbdd: Pull complete</span><br><span class="line">208723cd598a: Pull complete</span><br><span class="line">b876b05989fc: Pull complete</span><br><span class="line">12f0e0ef448a: Pull complete</span><br><span class="line">Digest: sha256:608e10b7aaac07e10a4cd639d8848aef96daa7dd5c7ebaaf6a7ecd47f903e1f8</span><br><span class="line">Status: Downloaded newer image for docker.io/vmware/harbor-log:v1.2.0</span><br><span class="line">Pulling registry (vmware/registry:2.6.2-photon)...</span><br><span class="line">Trying to pull repository docker.io/vmware/registry ... </span><br><span class="line">2.6.2-photon: Pulling from docker.io/vmware/registry</span><br><span class="line">4b40d82f242f: Pull complete</span><br><span class="line">f01e70edcc2b: Pull complete</span><br><span class="line">798027835c5f: Pull complete</span><br><span class="line">8652f3177ad3: Pull complete</span><br><span class="line">4753e541e7b5: Pull complete</span><br><span class="line">058f3d3811f4: Pull complete</span><br><span class="line">c6edb6ed847b: Pull complete</span><br><span class="line">Digest: sha256:d7cdde865c1fc389900f1929d9c4865fd1b598ca9be3f27bbe900339a10a5788</span><br><span class="line">Status: Downloaded newer image for docker.io/vmware/registry:2.6.2-photon</span><br><span class="line">Pulling mysql (vmware/harbor-db:v1.2.0)...</span><br><span class="line">Trying to pull repository docker.io/vmware/harbor-db ... </span><br><span class="line">v1.2.0: Pulling from docker.io/vmware/harbor-db</span><br><span class="line">df559435c037: Pull complete</span><br><span class="line">a6310a57af5d: Pull complete</span><br><span class="line">d13d90890144: Pull complete</span><br><span class="line">b694d8967a6c: Pull complete</span><br><span class="line">a34f6cef56a6: Pull complete</span><br><span class="line">3519eec83af5: Pull complete</span><br><span class="line">34bae610e56c: Pull complete</span><br><span class="line">86a867bebd89: Pull complete</span><br><span class="line">3db2d0ac366e: Pull complete</span><br><span class="line">c0d307ee295f: Pull complete</span><br><span class="line">c5b1b404c5ee: Pull complete</span><br><span class="line">14f4a4328366: Pull complete</span><br><span class="line">c7fa77b46ec4: Pull complete</span><br><span class="line">0cbe2b5669b8: Pull complete</span><br><span class="line">Digest: sha256:c10b3555beb6d1c851ae49a4e90ef4296a1ad42bcd1a58ae97e316b034515b6e</span><br><span class="line">Status: Downloaded newer image for docker.io/vmware/harbor-db:v1.2.0</span><br><span class="line">Pulling adminserver (vmware/harbor-adminserver:v1.2.0)...</span><br><span class="line">Trying to pull repository docker.io/vmware/harbor-adminserver ... </span><br><span class="line">v1.2.0: Pulling from docker.io/vmware/harbor-adminserver</span><br><span class="line">93b3dcee11d6: Already exists</span><br><span class="line">6ab21236e58b: Pull complete</span><br><span class="line">f70b0efff900: Pull complete</span><br><span class="line">c5d206b5e184: Pull complete</span><br><span class="line">Digest: sha256:aba66ec90fc12fe0814cecc9f647f5d17b41395199821cc7af69db9c0fbe446c</span><br><span class="line">Status: Downloaded newer image for docker.io/vmware/harbor-adminserver:v1.2.0</span><br><span class="line">Pulling ui (vmware/harbor-ui:v1.2.0)...</span><br><span class="line">Trying to pull repository docker.io/vmware/harbor-ui ... </span><br><span class="line">v1.2.0: Pulling from docker.io/vmware/harbor-ui</span><br><span class="line">93b3dcee11d6: Already exists</span><br><span class="line">6ab21236e58b: Already exists</span><br><span class="line">7753f4b55df6: Pull complete</span><br><span class="line">a647b33bdf74: Pull complete</span><br><span class="line">eb30db926101: Pull complete</span><br><span class="line">204d77847826: Pull complete</span><br><span class="line">4910a0b56c59: Pull complete</span><br><span class="line">e880a4b0031f: Pull complete</span><br><span class="line">Digest: sha256:b198d8f2f59515d286bdcf06c7f99c370eb4475e2547495c3e1db8761940646b</span><br><span class="line">Status: Downloaded newer image for docker.io/vmware/harbor-ui:v1.2.0</span><br><span class="line">Pulling jobservice (vmware/harbor-jobservice:v1.2.0)...</span><br><span class="line">Trying to pull repository docker.io/vmware/harbor-jobservice ... </span><br><span class="line">v1.2.0: Pulling from docker.io/vmware/harbor-jobservice</span><br><span class="line">93b3dcee11d6: Already exists</span><br><span class="line">6ab21236e58b: Already exists</span><br><span class="line">64bd0172d071: Pull complete</span><br><span class="line">b4f5382f226f: Pull complete</span><br><span class="line">Digest: sha256:0692648176c1c87379025b0519036b9f3f1a0eceb2646f17dd40eb143c898d5c</span><br><span class="line">Status: Downloaded newer image for docker.io/vmware/harbor-jobservice:v1.2.0</span><br><span class="line">Pulling proxy (vmware/nginx-photon:1.11.13)...</span><br><span class="line">Trying to pull repository docker.io/vmware/nginx-photon ... </span><br><span class="line">1.11.13: Pulling from docker.io/vmware/nginx-photon</span><br><span class="line">4b40d82f242f: Already exists</span><br><span class="line">2dcfe2cb4f13: Pull complete</span><br><span class="line">Digest: sha256:5a32f122b86f2d7794651f1a67c5e9ce1dce79b0e0c1bc25d559405312c156db</span><br><span class="line">Status: Downloaded newer image for docker.io/vmware/nginx-photon:1.11.13</span><br><span class="line">Creating harbor-log ... done</span><br><span class="line">Creating registry           ... done</span><br><span class="line">Creating harbor-adminserver ... done</span><br><span class="line">Creating harbor-db          ... done</span><br><span class="line">Creating harbor-ui          ... done</span><br><span class="line">Creating harbor-jobservice  ... done</span><br><span class="line">Creating nginx              ... done</span><br><span class="line"></span><br><span class="line">✔ ----Harbor has been installed and started successfully.----</span><br><span class="line"></span><br><span class="line">Now you should be able to visit the admin portal at http://reg.hancloud.cn. </span><br><span class="line">For more details, please visit https://github.com/vmware/harbor</span><br></pre></td></tr></table></figure><p>执行成功！<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 查看本地镜像文件，会多处如图几个镜像</span><br><span class="line">docker images</span><br></pre></td></tr></table></figure></p><p>Harbor 管理是通过docker-compose来完成的，Harbor本身有多个服务进程，都放在docker容器之中运行，我们可以通过docker ps或者docker-compose  ps命令查看 ;</p><h6 id="Harbor的启动和停止-："><a href="#Harbor的启动和停止-：" class="headerlink" title="Harbor的启动和停止 ："></a>Harbor的启动和停止 ：</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动Harbor</span></span><br><span class="line">docker-compose start</span><br><span class="line"><span class="comment"># 停止Harbor</span></span><br><span class="line">docker-comose stop</span><br><span class="line"><span class="comment"># 重启Harbor</span></span><br><span class="line">docker-compose restart</span><br></pre></td></tr></table></figure><h6 id="访问测试"><a href="#访问测试" class="headerlink" title="访问测试:"></a>访问测试:</h6><p>在浏览器输入 reg.hancloud.cn，harbor.cfg文件配置的域名为reg.hancloud.cn，默认账号/密码：admin/Harbor12345</p><h5 id="上传下载镜像"><a href="#上传下载镜像" class="headerlink" title="上传下载镜像"></a>上传下载镜像</h5><h6 id="指定仓库地址"><a href="#指定仓库地址" class="headerlink" title="指定仓库地址"></a>指定仓库地址</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/docker/daemon.json</span><br><span class="line"></span><br><span class="line">&#123; <span class="string">"insecure-registries"</span>:[<span class="string">"reg.hancloud.cn"</span>] &#125;</span><br></pre></td></tr></table></figure><p>重启docker：<code>systemctl  restart docker</code> </p><h6 id="创建Dockerfile"><a href="#创建Dockerfile" class="headerlink" title="创建Dockerfile"></a>创建Dockerfile</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vim Dockerfile </span><br><span class="line">FROM centos:centos7.1.1503</span><br><span class="line">ENV TZ <span class="string">"Asia/Shanghai"</span></span><br></pre></td></tr></table></figure><h6 id="创建镜像"><a href="#创建镜像" class="headerlink" title="创建镜像"></a>创建镜像</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># docker build -t reg.hanclound.cn/library/centos7.1:V0.0.1 .</span></span><br></pre></td></tr></table></figure><h6 id="把镜像push到Harbor"><a href="#把镜像push到Harbor" class="headerlink" title="把镜像push到Harbor"></a>把镜像push到Harbor</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># docker login reg.hanclound.cn</span></span><br><span class="line"><span class="comment"># docker push reg.hanclound.cn/library/centos7.1:V0.0.1</span></span><br></pre></td></tr></table></figure><h4 id="配置TLS证书"><a href="#配置TLS证书" class="headerlink" title="配置TLS证书"></a>配置TLS证书</h4><h5 id="修改配置文件harbor-cfg"><a href="#修改配置文件harbor-cfg" class="headerlink" title="修改配置文件harbor.cfg"></a>修改配置文件harbor.cfg</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hostname = 域名</span><br><span class="line">ui_url_protocol = https</span><br><span class="line">ssl_cert = /etc/certs/ca.crt</span><br><span class="line">ssl_cert_key = /etc/certs/ca.key</span><br></pre></td></tr></table></figure><h5 id="创建自签名证书key文件"><a href="#创建自签名证书key文件" class="headerlink" title="创建自签名证书key文件"></a>创建自签名证书key文件</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir /etc/certs</span><br><span class="line">openssl genrsa -out /etc/certs/ca.key 2048</span><br></pre></td></tr></table></figure><h5 id="创建自签名证书crt文件"><a href="#创建自签名证书crt文件" class="headerlink" title="创建自签名证书crt文件"></a>创建自签名证书crt文件</h5><p>注意：命令中<code>/CN=reg.hanclound.cn</code>字段中<code>reg.hanclound.cn</code>修改为自己配置的仓库域名<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl req -x509 -new -nodes -key /etc/certs/ca.key -subj <span class="string">"/CN=rgs.unixfbi.com"</span> -days 5000 -out /etc/certs/ca.crt</span><br></pre></td></tr></table></figure></p><h5 id="安装Harbor-2"><a href="#安装Harbor-2" class="headerlink" title="安装Harbor"></a>安装Harbor</h5><p><code>./install.sh</code> </p><h5 id="客户端配置"><a href="#客户端配置" class="headerlink" title="客户端配置"></a>客户端配置</h5><p>客户端需要创建证书文件存放的位置，并且把服务端创建的证书拷贝到该目录下，然后重启客户端docker。我们这里创建目录为：`/etc/docker/certs.d/reg.hanclound.cn ;</p><p>把服务端crt证书文件拷贝到客户端，例如我这的客户端为：192.168.0.94;<br><code># scp /etc/certs/ca.crt root@192.168.0.94:/etc/docker/certs.d/reg.hanclound.cn/</code><br>重启客户端docker<br><code>systemctl restart docker</code> </p><p>参考文案：</p><p>博客：<a href="https://www.cnblogs.com/pangguoping/p/7650014.html" target="_blank" rel="noopener">运维特工</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;摘要：Harbor是一个用于存储和分发Docker镜像的企业级Registry服务器，通过添加一些企业必需的功能特性&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;关于Harbor&quot;&gt;&lt;a href=&quot;#关于Harbor&quot; class=&quot;headerlink&quot; title=&quot;关于Harbor&quot;&gt;&lt;/a&gt;关于Harbor&lt;/h3&gt;&lt;p&gt;Harbor是一个用于存储和分发Docker镜像的企业级Registry服务器，通过添加一些企业必需的功能特性，例如安全、标识和管理等，扩展了开源Docker Distribution。作为一个企业级私有Registry服务器，Harbor提供了更好的性能和安全。提升用户使用Registry构建和运行环境传输镜像的效率。Harbor支持安装在多个Registry节点的镜像资源复制，镜像全部保存在私有Registry中， 确保数据和知识产权在公司内部网络中管控。另外，Harbor也提供了高级的安全特性，诸如用户管理，访问控制和活动审计等 ；&lt;/p&gt;
    
    </summary>
    
      <category term="Docker" scheme="https://www.aikaiqiang.cn/categories/Docker/"/>
    
    
      <category term="Docker" scheme="https://www.aikaiqiang.cn/tags/Docker/"/>
    
      <category term="Harbor" scheme="https://www.aikaiqiang.cn/tags/Harbor/"/>
    
      <category term="Docker Registry" scheme="https://www.aikaiqiang.cn/tags/Docker-Registry/"/>
    
  </entry>
  
  <entry>
    <title>IDEA常用快捷键</title>
    <link href="https://www.aikaiqiang.cn/2018/10/11/Tool-idea/"/>
    <id>https://www.aikaiqiang.cn/2018/10/11/Tool-idea/</id>
    <published>2018-10-11T07:34:25.000Z</published>
    <updated>2019-11-22T08:58:50.953Z</updated>
    
    <content type="html"><![CDATA[<h2 id="IDEA-快捷键"><a href="#IDEA-快捷键" class="headerlink" title="IDEA 快捷键"></a>IDEA 快捷键</h2><p>Ctrl+Shift + Enter，语句完成<br>“！”，否定完成，输入表达式时按 “！”键</p><a id="more"></a><h3 id="IDEA-配置"><a href="#IDEA-配置" class="headerlink" title="IDEA 配置"></a>IDEA 配置</h3><p>因机器本身的配置而配置:<br>\IntelliJ IDEA8\bin\idea.exe.vmoptions<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-Xms2048m     </span><br><span class="line">-Xmx2048m  </span><br><span class="line">-XX:MaxPermSize=512m  </span><br><span class="line">-ea  </span><br><span class="line">-server  </span><br><span class="line">-Dsun.awt.keepWorkingSetOnMinimize=<span class="literal">true</span></span><br></pre></td></tr></table></figure></p><hr><h3 id="实用快捷键"><a href="#实用快捷键" class="headerlink" title="实用快捷键"></a>实用快捷键</h3><p>Ctrl+/ 或 Ctrl+Shift+/ 注释（// 或者/<em>…</em>/ ）<br>Ctrl+D 复制行<br>Ctrl+X 删除行<br>快速修复 alt+enter(modify/cast)<br>代码提示 alt+/<br>ctr+G 定位某一行<br>Shift+F6 重构-重命名 IDEA 批量修改变量名 点击变量名后按shift+F6<br>Ctrl+R 替换文本<br>Ctrl+F 查找文本</p><p>代码处F2 快速定位编译出错位置</p><p>Ctrl+E 最近打开的文件<br>Ctrl+J 自动代码</p><p>Ctrl+ home/end 抵达文件头部,底部</p><p>组织导入 ctr+alt+O<br>格式化代码 ctr+alt+L<br>大小写转化 ctr+shift+U</p><hr><h3 id="IntelliJ-Idea-常用快捷键列表"><a href="#IntelliJ-Idea-常用快捷键列表" class="headerlink" title="IntelliJ Idea 常用快捷键列表"></a>IntelliJ Idea 常用快捷键列表</h3><p>Alt+回车导入包,自动修正<br>Ctrl+N   查找类<br>Ctrl+Shift+N 查找文件<br>Ctrl+Alt+L  格式化代码</p><p>Ctrl+Alt+O 优化导入的类和包<br>Alt+Insert 生成代码(如get,set方法,构造函数等)<br>Ctrl+E或者Alt+Shift+C  最近更改的代码<br>Ctrl+R 替换文本</p><p>Ctrl+F 查找文本<br>Ctrl+Shift+Space 自动补全代码<br>Ctrl+空格代码提示</p><p>Ctrl+Alt+Space 类名或接口名提示</p><p>Ctrl+P 方法参数提示</p><p>Ctrl+Shift+Alt+N 查找类中的方法或变量</p><p>Alt+Shift+C 对比最近修改的代码</p><p>Shift+F6  重构-重命名<br>Ctrl+Shift+先上键<br>Ctrl+X 删除行<br>Ctrl+D 复制行<br>Ctrl+/ 或 Ctrl+Shift+/  注释（// 或者/<em>…</em>/ ）<br>Ctrl+J  自动代码<br>Ctrl+E 最近打开的文件</p><p>Ctrl+H 显示类结构图</p><p>Ctrl+Q 显示注释文档<br>Alt+F1 查找代码所在位置<br>Alt+1 快速打开或隐藏工程面板</p><p>Ctrl+Alt+left/right 返回至上次浏览的位置<br>Alt+ left/right 切换代码视图</p><p>Alt+ Up/Down 在方法间快速移动定位</p><p>Ctrl+Shift+Up/Down代码向上/下移动。</p><p>F2 或Shift+F2 高亮错误或警告快速定位</p><p>代码标签输入完成后，按Tab，生成代码。</p><p>选中文本，按Ctrl+Shift+F7 ，高亮显示所有该文本，按Esc高亮消失。</p><p>Ctrl+W 选中代码，连续按会有其他效果</p><p>选中文本，按Alt+F3 ，逐个往下查找相同文本，并高亮显示。</p><p>Ctrl+Up/Down 光标跳转到第一行或最后一行下</p><p>Ctrl+B 快速打开光标处的类或方法 </p><p>Ctrl+O 查看该类可以重写哪些方法</p><hr><h3 id="查询快捷键"><a href="#查询快捷键" class="headerlink" title="查询快捷键"></a>查询快捷键</h3><p>CTRL+N  查找类<br>CTRL+SHIFT+N  查找文件<br>CTRL+SHIFT+ALT+N 查找类中的方法或变量<br>CIRL+B   找变量的来源<br>CTRL+ALT+B  找所有的子类<br>CTRL+SHIFT+B  找变量的类<br>CTRL+G   定位行<br>CTRL+F   在当前窗口查找文本<br>CTRL+SHIFT+F  在指定窗口查找文本<br>CTRL+R   在当前窗口替换文本<br>CTRL+SHIFT+R  在指定窗口替换文本<br>ALT+SHIFT+C  查找修改的文件<br>CTRL+E   最近打开的文件<br>F3   向下查找关键字出现位置<br>SHIFT+F3  向上一个关键字出现位置<br>F4   查找变量来源<br>CTRL+ALT+F7  选中的字符查找工程出现的地方<br>CTRL+SHIFT+O  弹出显示查找内容</p><hr><h3 id="自动代码"><a href="#自动代码" class="headerlink" title="自动代码"></a>自动代码</h3><p>ALT+回车  导入包,自动修正<br>CTRL+ALT+L  格式化代码<br>CTRL+ALT+I  自动缩进<br>CTRL+ALT+O  优化导入的类和包<br>ALT+INSERT  生成代码(如GET,SET方法,构造函数等)<br>CTRL+E 最近更改的代码<br>CTRL+SHIFT+SPACE 自动补全代码<br>CTRL+空格  代码提示<br>CTRL+ALT+SPACE  类名或接口名提示<br>CTRL+P   方法参数提示<br>CTRL+J   自动代码<br>CTRL+ALT+T  把选中的代码放在 TRY{} IF{} ELSE{}里</p><p>CTRL+ALT+M  抽取方法</p><hr><h3 id="复制快捷方式"><a href="#复制快捷方式" class="headerlink" title="复制快捷方式"></a>复制快捷方式</h3><p>CTRL+D  复制行<br>CTRL+X   剪切,删除行 </p><hr><h3 id="其他快捷方式"><a href="#其他快捷方式" class="headerlink" title="其他快捷方式"></a>其他快捷方式</h3><p>CIRL+U  大小写切换<br>CTRL+Z   倒退<br>CTRL+SHIFT+Z  向前<br>CTRL+ALT+F12  资源管理器打开文件夹<br>ALT+F1   查找文件所在目录位置<br>SHIFT+ALT+INSERT 竖编辑模式<br>CTRL+/   注释//<br>CTRL+SHIFT+/  注释/<em>…</em>/<br>CTRL+W   选中代码，连续按会有其他效果<br>CTRL+B   快速打开光标处的类或方法<br>ALT+ ←/→ 切换代码视图<br>CTRL+ALT ←/→ 返回上次编辑的位置<br>ALT+ ↑/↓ 在方法间快速移动定位<br>SHIFT+F6  重构-重命名<br>CTRL+H   显示类结构图<br>CTRL+Q   显示注释文档<br>ALT+1   快速打开或隐藏工程面板<br>CTRL+SHIFT+UP/DOWN 代码向上/下移动。<br>CTRL+UP/DOWN  光标跳转到第一行或最后一行下<br>ESC   光标返回编辑框<br>SHIFT+ESC  光标返回编辑框,关闭无用的窗口<br>F1   帮助千万别按,很卡!<br>书签帮助L(操作非数字键盘的数字!!!!!!!)</p><p>Ctrl +Shift+1-9 书签定位行为1-9 或者字母,</p><p>Ctrl + 1-9 自动跳转到锁定位的书签位置</p><p>Ctrl+ F9 重新编译, 删除缓存.实时更新</p><p>Ctrl+Shift+U 大小写切换</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;IDEA-快捷键&quot;&gt;&lt;a href=&quot;#IDEA-快捷键&quot; class=&quot;headerlink&quot; title=&quot;IDEA 快捷键&quot;&gt;&lt;/a&gt;IDEA 快捷键&lt;/h2&gt;&lt;p&gt;Ctrl+Shift + Enter，语句完成&lt;br&gt;“！”，否定完成，输入表达式时按 “！”键&lt;/p&gt;
    
    </summary>
    
      <category term="工具" scheme="https://www.aikaiqiang.cn/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="IDEA" scheme="https://www.aikaiqiang.cn/tags/IDEA/"/>
    
      <category term="工具" scheme="https://www.aikaiqiang.cn/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>Docker+Rancher+Docker registry服务镜像化</title>
    <link href="https://www.aikaiqiang.cn/2018/09/30/Docker-rancher/"/>
    <id>https://www.aikaiqiang.cn/2018/09/30/Docker-rancher/</id>
    <published>2018-09-30T08:00:54.000Z</published>
    <updated>2019-11-22T08:58:50.941Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>摘要：本次操作基于CentOS 7部署</p></blockquote><h3 id="安装Docker"><a href="#安装Docker" class="headerlink" title="安装Docker"></a>安装Docker</h3><h4 id="利用yum工具安装docker"><a href="#利用yum工具安装docker" class="headerlink" title="利用yum工具安装docker"></a>利用yum工具安装docker</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install docker</span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="启动docker"><a href="#启动docker" class="headerlink" title="启动docker"></a>启动docker</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start docker</span><br></pre></td></tr></table></figure><p>输入上面命令后，报错如图:</p><p>根据提示输入命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl status docker.service</span><br></pre></td></tr></table></figure></p><p>输出信息如下:</p><p>输出指出：SELinux 不支持overlay2，所以要关闭SELinux，编辑文件 <code>/etc/sysconfig/docker</code> :</p><p><code>vi /etc/sysconfig/docker</code></p><p>重启docker： <code>systemctl restart docker</code></p><h4 id="查看docker服务状态"><a href="#查看docker服务状态" class="headerlink" title="查看docker服务状态"></a>查看docker服务状态</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl status docker</span><br></pre></td></tr></table></figure><p>到此docker已经安装并成功启动。。。</p><hr><h4 id="将docker服务加入开启自启动"><a href="#将docker服务加入开启自启动" class="headerlink" title="将docker服务加入开启自启动"></a>将docker服务加入开启自启动</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="built_in">enable</span> docker</span><br></pre></td></tr></table></figure><h4 id="修改docker镜像地址为国内官方地址，重启docker是配置生效；"><a href="#修改docker镜像地址为国内官方地址，重启docker是配置生效；" class="headerlink" title="修改docker镜像地址为国内官方地址，重启docker是配置生效；"></a>修改docker镜像地址为国内官方地址，重启docker是配置生效；</h4><p><code>vim /etc/docker/daemon.json</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">&quot;registry-mirrors&quot;: [&quot;https://registry.docker-cn.com&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="修改docker镜像和容器的存储位置，Docker默认的镜像和容器存储位置在-var-lib-docker-："><a href="#修改docker镜像和容器的存储位置，Docker默认的镜像和容器存储位置在-var-lib-docker-：" class="headerlink" title="修改docker镜像和容器的存储位置，Docker默认的镜像和容器存储位置在/var/lib/docker ："></a>修改docker镜像和容器的存储位置，Docker默认的镜像和容器存储位置在/var/lib/docker ：</h4><p>编辑文件docker.service，使用-g参数指定存储位置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /usr/lib/systemd/system/docker.service</span><br></pre></td></tr></table></figure><p>ExecStart=/usr/bin/dockerd下面添加如下内容 :</p><p>–graph  /data/tool/docker  #自定义存储目录</p><p>reload配置文件：systemctl daemon-reload</p><p>重启docker服务：systemctl restart docker</p><h4 id="查看linux信息"><a href="#查看linux信息" class="headerlink" title="查看linux信息"></a>查看linux信息</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看linux当前操作系统内核信息</span></span><br><span class="line">uname -a </span><br><span class="line"><span class="comment"># Linux查看当前操作系统版本信息</span></span><br><span class="line">cat /proc/version      </span><br><span class="line"><span class="comment"># Linux查看cpu相关信息，包括型号、主频、内核信息等</span></span><br><span class="line">cat /proc/cpuinfo</span><br><span class="line">```                   </span><br><span class="line"></span><br><span class="line"><span class="comment">###  安装Rancher</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#### docker容器化部署：（[参考连接](https://rancher.com/docs/rancher/v1.6/zh/installing-rancher/installing-server/)）</span></span><br><span class="line"></span><br><span class="line"><span class="comment">##### 启动 RANCHER SERVER - 单容器部署 - 使用外部数据库：</span></span><br><span class="line"></span><br><span class="line">```bash</span><br><span class="line">docker run -d --restart=unless-stopped -p 8080:8080 rancher/server \</span><br><span class="line">      --db-host 192.168.0.14 \</span><br><span class="line">      --db-port 3306 \</span><br><span class="line">      --db-user root \</span><br><span class="line">      --db-password Cobbler1234! \ </span><br><span class="line">      --db-name cattle</span><br></pre></td></tr></table></figure><p>cattle 是提前在192.168.0.14上建好的数据库；</p><ol><li>启动报错：exec: “docker-proxy”: executable file not found in $PATH 如图：</li></ol><p>查看下 docker-proxy 的位置： <code>cat /usr/lib/systemd/system/docker.service | grep prox</code></p><p>创建一条软连接到 /usr/bin/ 下：<code>ln -s /usr/libexec/docker/docker-proxy-current  /usr/bin/docker-proxy</code></p><ol start="2"><li>启动报错2：Error response from daemon: shim error: docker-runc not installed on system，如图：</li></ol><p>查看下 docker-runc 的位置：<code>cat/usr/lib/systemd/system/docker.service | grep runc</code></p><p>创建一条软连接到 /usr/bin/ 下： <code>ln -s /usr/libexec/docker/docker-runc-current /usr/bin/docker-runc</code></p><h5 id="启动-RANCHER-SERVER-单容器部署-NON-HA"><a href="#启动-RANCHER-SERVER-单容器部署-NON-HA" class="headerlink" title="启动 RANCHER SERVER - 单容器部署 (NON-HA)"></a>启动 RANCHER SERVER - 单容器部署 (NON-HA)</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --restart=unless-stopped -p 8080:8080 rancher/server</span><br></pre></td></tr></table></figure><p>启动报错：iptables failed: iptables –wait -t nat -A DOCKER -p tcp -d 0/0 –dport 8080 -j DNAT –to-destination 172.17.0.2:8080 ! -i docker0: iptables: No chain/target/match by that name.如图：<br></p><p>处理报错：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 先看能不能ping通网络。若能依次执行以下命令:</span></span><br><span class="line">pkill docker</span><br><span class="line">iptables -t nat -F</span><br><span class="line">ifconfig docker0 down</span><br><span class="line">brctl delbr docker0</span><br><span class="line">docker -d</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启docker服务</span></span><br><span class="line">systmctl restart docker</span><br></pre></td></tr></table></figure></p><p>重启后，查看docker 容器： <code>docker ps -a</code>  如图：<br></p><p>启动成功，访问<a href="http://192.168.0.93:8080（部署服务器地址:端口）,如图：" target="_blank" rel="noopener">http://192.168.0.93:8080（部署服务器地址:端口）,如图：</a><br></p><h5 id="配置RANCHER"><a href="#配置RANCHER" class="headerlink" title="配置RANCHER"></a>配置RANCHER</h5><ul><li>访问控制：</li></ul><p>目前选择本地身份认证（<a href="https://rancher.com/docs/rancher/v1.6/zh/configuration/access-control/#section-3" target="_blank" rel="noopener">参考链接</a>）：<br>账户/密码：admin/123456</p><ul><li>添加主机</li></ul><h3 id="部署私有仓库-Docker-Registry"><a href="#部署私有仓库-Docker-Registry" class="headerlink" title="部署私有仓库 Docker Registry"></a>部署私有仓库 Docker Registry</h3><h4 id="安装运行-docker-registry"><a href="#安装运行-docker-registry" class="headerlink" title="安装运行 docker-registry"></a>安装运行 docker-registry</h4><ul><li><strong><em>默认安装</em></strong></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 5000:5000 --restart=always --name registry registry</span><br></pre></td></tr></table></figure><p>使用官方的 registry 镜像来启动私有仓库。默认情况下，仓库会被创建在<strong><em>容器</em></strong>的 /var/lib/registry 目录下;</p><ul><li><strong><em>指定仓库目录安装</em></strong></li></ul><p>通过 <code>-v</code> 参数来将镜像文件存放在本地的指定路径 :</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 5000:5000 -v /data/tool/docker/registry:/var/lib/registry registry</span><br></pre></td></tr></table></figure><h4 id="查看系统当前的镜像："><a href="#查看系统当前的镜像：" class="headerlink" title="查看系统当前的镜像："></a>查看系统当前的镜像：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure><h4 id="使用-docker-tag-来标记一个镜像，然后推送它到仓库。例如私有仓库地址为-127-0-0-1-5000"><a href="#使用-docker-tag-来标记一个镜像，然后推送它到仓库。例如私有仓库地址为-127-0-0-1-5000" class="headerlink" title="使用 docker tag 来标记一个镜像，然后推送它到仓库。例如私有仓库地址为 127.0.0.1:5000"></a>使用 <code>docker tag</code> 来标记一个镜像，然后推送它到仓库。例如私有仓库地址为 <code>127.0.0.1:5000</code></h4><p>格式为 <code>docker tag IMAGE[:TAG] [REGISTRY_HOST[:REGISTRY_PORT]/]REPOSITORY[:TAG]</code>  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker tag a0b9e05b2a03  127.0.0.1:5000/rancher_server:version1.0</span><br></pre></td></tr></table></figure><p>如上图，多了一个rancher/server 镜像 tag 为 version1.0</p><p>上传到私有仓库：<code>docker push 127.0.0.1:5000/rancher_server:version1.0</code></p><h4 id="用-curl-查看仓库中的镜像-：curl-127-0-0-1-5000-v2-catalog"><a href="#用-curl-查看仓库中的镜像-：curl-127-0-0-1-5000-v2-catalog" class="headerlink" title="用 curl 查看仓库中的镜像 ：curl 127.0.0.1:5000/v2/_catalog"></a>用 <code>curl</code> 查看仓库中的镜像 ：<code>curl 127.0.0.1:5000/v2/_catalog</code></h4><p>直接在浏览器访问查看：<br></p><hr><h3 id="【以下是基于本地win10系统安装docker后构建docker镜像】"><a href="#【以下是基于本地win10系统安装docker后构建docker镜像】" class="headerlink" title="【以下是基于本地win10系统安装docker后构建docker镜像】"></a>【以下是基于本地win10系统安装docker后构建docker镜像】</h3><p>备注：下文中镜像仓库ip地址修改为 192.168.0.94</p><h4 id="使用Dockerfile文件构建镜像"><a href="#使用Dockerfile文件构建镜像" class="headerlink" title="使用Dockerfile文件构建镜像"></a>使用Dockerfile文件构建镜像</h4><ul><li>编写Dockerfile文件</li></ul><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> java:<span class="number">8</span></span><br><span class="line"><span class="keyword">VOLUME</span><span class="bash"> /data/container</span></span><br><span class="line"><span class="bash">ADD magic-eureka-center-0.0.1-SNAPSHOT.jar app.jar</span></span><br><span class="line"><span class="bash">RUN bash -c <span class="string">'touch /app.jar'</span></span></span><br><span class="line"><span class="bash">EXPOSE 8761</span></span><br><span class="line"><span class="bash">ENTRYPOINT [<span class="string">"java"</span>,<span class="string">"-Djava.security.egd=file:/dev/./urandom"</span>,<span class="string">"-jar"</span>,<span class="string">"/app.jar"</span>]</span></span><br></pre></td></tr></table></figure><ul><li>docker build构建镜像<br>格式：docker build -t  仓库名称/镜像名称[:标签]   Dockerfile的相对位置<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t magic/eureka:0.0.1 .</span><br></pre></td></tr></table></figure></li></ul><ul><li>查看镜像</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure><h4 id="使用maven插件构建镜像"><a href="#使用maven插件构建镜像" class="headerlink" title="使用maven插件构建镜像"></a>使用maven插件构建镜像</h4><p>在pom.xml文件增加插件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;plugin&gt;</span><br><span class="line">    &lt;groupId&gt;com.spotify&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;docker-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;0.4.13&lt;/version&gt;</span><br><span class="line">    &lt;configuration&gt;</span><br><span class="line">        &lt;imageName&gt;$&#123;project.artifactId&#125;:$&#123;core.version&#125;&lt;/imageName&gt;</span><br><span class="line">        &lt;dockerDirectory&gt;$&#123;project.basedir&#125;/src/main/docker&lt;/dockerDirectory&gt;</span><br><span class="line">        &lt;resources&gt;</span><br><span class="line">            &lt;resource&gt;</span><br><span class="line">                &lt;targetPath&gt;/&lt;/targetPath&gt;</span><br><span class="line">                &lt;directory&gt;$&#123;project.build.directory&#125;&lt;/directory&gt;</span><br><span class="line">                &lt;include&gt;$&#123;project.build.finalName&#125;.jar&lt;/include&gt;</span><br><span class="line">            &lt;/resource&gt;</span><br><span class="line">        &lt;/resources&gt;</span><br><span class="line">    &lt;/configuration&gt;</span><br><span class="line">&lt;/plugin&gt;</span><br></pre></td></tr></table></figure><p>在/src/main/docker目录下新建Dockerfile</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> java:<span class="number">8</span></span><br><span class="line"><span class="keyword">VOLUME</span><span class="bash"> /data/container</span></span><br><span class="line"><span class="bash">ADD magic-eureka-center-0.0.1-SNAPSHOT.jar app.jar</span></span><br><span class="line"><span class="bash">RUN bash -c <span class="string">'touch /app.jar'</span></span></span><br><span class="line"><span class="bash">EXPOSE 8761</span></span><br><span class="line"><span class="bash">ENTRYPOINT [<span class="string">"java"</span>,<span class="string">"-Djava.security.egd=file:/dev/./urandom"</span>,<span class="string">"-jar"</span>,<span class="string">"/app.jar"</span>]</span></span><br></pre></td></tr></table></figure><p>子模块根目录下 magic-eureka-center/  使用命令构建，运行命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn clean package docker:build</span><br></pre></td></tr></table></figure><p>或者 通过IDEA 配置：<br><br>在控制台Console可以看到构建成功后的输出信息;<br>使用 <code>docker images</code> 查看新构建的镜像;</p><h4 id="上传镜像私有Docker-Registry"><a href="#上传镜像私有Docker-Registry" class="headerlink" title="上传镜像私有Docker Registry"></a>上传镜像私有Docker Registry</h4><ul><li><p>为本地镜像打标签</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker tag magic/eureka:0.0.1 192.168.0.94:5000/magic/eureka:0.0.1</span><br></pre></td></tr></table></figure></li><li><p>push到仓库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker push 192.168.0.94:5000/magic/eureka:0.0.1</span><br></pre></td></tr></table></figure></li></ul><p>有点不顺利~~~，报错如下：</p><p>错误信息：Get <a href="https://192.168.0.94:5000/v2/" target="_blank" rel="noopener">https://192.168.0.94:5000/v2/</a>: http: server gave HTTP response to HTTPS client</p><p>查询错误原因：<a href="https://www.cnblogs.com/hobinly/p/6110624.html" target="_blank" rel="noopener">参考博客</a></p><p>根据以上信息，我修改了本地【win10】docker的daemon.json文件 ，再重启服务： </p><p>重新push就可以了，如图：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker push 192.168.0.94:5000/magic/eureka:0.0.1</span><br></pre></td></tr></table></figure><h4 id="从私有docker仓库pull镜像-启动服务"><a href="#从私有docker仓库pull镜像-启动服务" class="headerlink" title="从私有docker仓库pull镜像,启动服务"></a>从私有docker仓库pull镜像,启动服务</h4><p>在192.168.0.94机器上从私有docker镜像仓库获取之前上传的镜像，再运行</p><ul><li>pull镜像<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull 192.168.0.94:5000/magic/eureka:0.0.1</span><br></pre></td></tr></table></figure></li></ul><p>地址上加http协议报错：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull http://192.168.0.94:5000/magic/eureka:0.0.1 <span class="comment">#错误</span></span><br></pre></td></tr></table></figure></p><ul><li>运行镜像</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 8761:8761 192.168.0.94:5000/magic/eureka:0.0.1</span><br></pre></td></tr></table></figure><p>查看运行中的容器：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps</span><br></pre></td></tr></table></figure></p><h4 id="使用Docker-Compose-工具编排微服务"><a href="#使用Docker-Compose-工具编排微服务" class="headerlink" title="使用Docker-Compose 工具编排微服务"></a>使用Docker-Compose 工具编排微服务</h4><ul><li><p>安装docker-compose  <a href="https://docs.docker.com/compose/install/#install-compose" target="_blank" rel="noopener">参考地址</a></p><ul><li><p>下载最新版本docker-compose</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -L <span class="string">"https://github.com/docker/compose/releases/download/1.22.0/docker-compose-<span class="variable">$(uname -s)</span>-<span class="variable">$(uname -m)</span>"</span> -o /usr/<span class="built_in">local</span>/bin/docker-compose</span><br></pre></td></tr></table></figure></li><li><p>添加执行权限</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chmod +x /usr/<span class="built_in">local</span>/bin/docker-compose</span><br></pre></td></tr></table></figure></li><li><p>安装完成</p></li></ul></li></ul><ul><li><p>安装docker-compose命令补全工具（输入docker-compose后按Tab键提示）<br><a href="https://docs.docker.com/compose/completion/" target="_blank" rel="noopener">参考地址</a><br>运行如下命令，重新连接终端即可生效</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo curl -L https://raw.githubusercontent.com/docker/compose/1.22.0/contrib/completion/bash/docker-compose -o /etc/bash_completion.d/docker-compose</span><br></pre></td></tr></table></figure></li><li><p>编写docker-compose.yml文件：<br>目录结构：</p></li></ul><p>docker-compose.yml 代码:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 表示该docker-compose.yml文件使用的是Version 2 file format</span></span><br><span class="line">version: <span class="string">'2'</span></span><br><span class="line"><span class="comment"># Version 2 file format 的固定写法，为project定义服务</span></span><br><span class="line">services:</span><br><span class="line"><span class="comment"># 指定服务名称</span></span><br><span class="line">eureka:</span><br><span class="line">  <span class="comment"># replace username/repo:tag with your name and image details</span></span><br><span class="line">  <span class="comment">#image: username/repo:tag</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># build构建镜像，Dockerfile文件相对地址</span></span><br><span class="line">  build: .</span><br><span class="line"></span><br><span class="line">  <span class="comment"># 暴露端口</span></span><br><span class="line">  ports:</span><br><span class="line">  - <span class="string">"8761:8761"</span></span><br><span class="line">  expose:</span><br><span class="line">  - 8761</span><br></pre></td></tr></table></figure><p>Dockerfile文件代码：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> java:<span class="number">8</span></span><br><span class="line"><span class="keyword">VOLUME</span><span class="bash"> /data/container</span></span><br><span class="line"><span class="bash">ADD target/magic-eureka-center-0.0.1-SNAPSHOT.jar app.jar</span></span><br><span class="line"><span class="bash">RUN bash -c <span class="string">'touch /app.jar'</span></span></span><br><span class="line"><span class="bash">EXPOSE 8761</span></span><br><span class="line"><span class="bash">ENTRYPOINT [<span class="string">"java"</span>,<span class="string">"-Djava.security.egd=file:/dev/./urandom"</span>,<span class="string">"-jar"</span>,<span class="string">"/app.jar"</span>]</span></span><br></pre></td></tr></table></figure><p>运行构建:<code>docker-compose up</code>  </p><p>后台运行构建: <code>docker-compose up -d</code> </p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;摘要：本次操作基于CentOS 7部署&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;安装Docker&quot;&gt;&lt;a href=&quot;#安装Docker&quot; class=&quot;headerlink&quot; title=&quot;安装Docker&quot;&gt;&lt;/a&gt;安装Docker&lt;/h3&gt;&lt;h4 id=&quot;利用yum工具安装docker&quot;&gt;&lt;a href=&quot;#利用yum工具安装docker&quot; class=&quot;headerlink&quot; title=&quot;利用yum工具安装docker&quot;&gt;&lt;/a&gt;利用yum工具安装docker&lt;/h4&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;yum -y install docker&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Docker" scheme="https://www.aikaiqiang.cn/categories/Docker/"/>
    
    
      <category term="Docker" scheme="https://www.aikaiqiang.cn/tags/Docker/"/>
    
      <category term="Docker Registry" scheme="https://www.aikaiqiang.cn/tags/Docker-Registry/"/>
    
      <category term="Rancher" scheme="https://www.aikaiqiang.cn/tags/Rancher/"/>
    
  </entry>
  
  <entry>
    <title>名句摘录</title>
    <link href="https://www.aikaiqiang.cn/2018/09/29/Quotes/"/>
    <id>https://www.aikaiqiang.cn/2018/09/29/Quotes/</id>
    <published>2018-09-29T07:39:42.000Z</published>
    <updated>2019-11-22T08:58:50.953Z</updated>
    
    <content type="html"><![CDATA[<h3 id="名句摘录"><a href="#名句摘录" class="headerlink" title="名句摘录"></a>名句摘录</h3><blockquote><p>君子之行，动则思义，不为利回，不为义疚；</p></blockquote><blockquote><p>知足不辱，知止不殆，可以长久；</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;名句摘录&quot;&gt;&lt;a href=&quot;#名句摘录&quot; class=&quot;headerlink&quot; title=&quot;名句摘录&quot;&gt;&lt;/a&gt;名句摘录&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;君子之行，动则思义，不为利回，不为义疚；&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquot
      
    
    </summary>
    
      <category term="名句" scheme="https://www.aikaiqiang.cn/categories/%E5%90%8D%E5%8F%A5/"/>
    
    
      <category term="名句" scheme="https://www.aikaiqiang.cn/tags/%E5%90%8D%E5%8F%A5/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://www.aikaiqiang.cn/2018/09/10/Hello-world/"/>
    <id>https://www.aikaiqiang.cn/2018/09/10/Hello-world/</id>
    <published>2018-09-10T09:15:39.000Z</published>
    <updated>2019-11-22T08:58:50.953Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><a id="more"></a><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
    
    </summary>
    
      <category term="Hexo" scheme="https://www.aikaiqiang.cn/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="https://www.aikaiqiang.cn/tags/Hexo/"/>
    
  </entry>
  
</feed>
