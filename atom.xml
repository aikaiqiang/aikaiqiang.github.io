<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>舒克贝塔皮皮鲁</title>
  
  <subtitle>Java程序猿：练习比知道更nice</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://aikaiqiang.coding.me/"/>
  <updated>2019-02-20T08:23:43.893Z</updated>
  <id>http://aikaiqiang.coding.me/</id>
  
  <author>
    <name>aikaiqiang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Git上传本地项目到远程仓库</title>
    <link href="http://aikaiqiang.coding.me/2019/02/19/Git-push-remote/"/>
    <id>http://aikaiqiang.coding.me/2019/02/19/Git-push-remote/</id>
    <published>2019-02-19T09:07:46.000Z</published>
    <updated>2019-02-20T08:23:43.893Z</updated>
    
    <content type="html"><![CDATA[<h3 id="初始化本地仓库"><a href="#初始化本地仓库" class="headerlink" title="初始化本地仓库"></a>初始化本地仓库</h3><ul><li>初始化目录<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 初始化目录</span></span><br><span class="line">git init</span><br><span class="line"><span class="comment"># 查看你当前目录下文件状态</span></span><br><span class="line">git status</span><br><span class="line"><span class="comment"># git add把项目添加到仓库</span></span><br><span class="line">git add .</span><br><span class="line"><span class="comment"># git commit 提交文件到本地仓库</span></span><br><span class="line">git commit -m <span class="string">"提交备注"</span></span><br></pre></td></tr></table></figure></li></ul><a id="more"></a><h3 id="创建SSH-KEY-链接远程仓库"><a href="#创建SSH-KEY-链接远程仓库" class="headerlink" title="创建SSH KEY 链接远程仓库"></a>创建SSH KEY 链接远程仓库</h3><ul><li>本地生成ssh key<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">"youremail@example.com"</span></span><br></pre></td></tr></table></figure></li></ul><p>当前用户.ssh目录里找到id_rsa和id_rsa.pub这两个文件，将id_rsa.pub文件内容添加到gitHub的Settings下SSH KEY</p><h3 id="在远程仓库创建一个用来存储代码的仓库"><a href="#在远程仓库创建一个用来存储代码的仓库" class="headerlink" title="在远程仓库创建一个用来存储代码的仓库"></a>在远程仓库创建一个用来存储代码的仓库</h3><ul><li><p>本地关联远程仓库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin https://github.com/aikaiqiang/myLittleApp.git</span><br></pre></td></tr></table></figure></li><li><p>本地仓库内容推到远程仓库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 由于新建的远程仓库是空的，所以要加上-u这个参数，等远程仓库里面有了内容之后；</span></span><br><span class="line">git push -u origin master</span><br><span class="line"><span class="comment"># 下次再从本地库上传内容的时候只需下面命令：</span></span><br><span class="line">git push origin master</span><br></pre></td></tr></table></figure></li></ul><p>如果push失败，==可能是远程仓库有文件readme.md==，建议先合并远程仓库内容到本地再push<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull --rebase origin master</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;初始化本地仓库&quot;&gt;&lt;a href=&quot;#初始化本地仓库&quot; class=&quot;headerlink&quot; title=&quot;初始化本地仓库&quot;&gt;&lt;/a&gt;初始化本地仓库&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;初始化目录&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 初始化目录&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git init&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 查看你当前目录下文件状态&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git status&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# git add把项目添加到仓库&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git add .&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# git commit 提交文件到本地仓库&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git commit -m &lt;span class=&quot;string&quot;&gt;&quot;提交备注&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Git" scheme="http://aikaiqiang.coding.me/categories/Git/"/>
    
    
      <category term="Git" scheme="http://aikaiqiang.coding.me/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Harbor修改端口号</title>
    <link href="http://aikaiqiang.coding.me/2018/10/12/Harbor-setting/"/>
    <id>http://aikaiqiang.coding.me/2018/10/12/Harbor-setting/</id>
    <published>2018-10-12T09:15:39.000Z</published>
    <updated>2019-02-20T08:23:43.893Z</updated>
    
    <content type="html"><![CDATA[<p>背景：之前安装Harbor时默认安装的，服务端口默认占用80和443，后来有同事要用到80端口，为了满足同时的需求，不得不麻烦自己修改端口了。</p><h3 id="修改docker-compose-yml文件端口映射为1180-gt-80"><a href="#修改docker-compose-yml文件端口映射为1180-gt-80" class="headerlink" title="修改docker-compose.yml文件端口映射为1180 &gt; 80:"></a>修改docker-compose.yml文件端口映射为1180 &gt; 80:</h3><p>在Harbor路径下找到文件 docker-compose.yml，我本地路径是 /usr/local/harbor</p><a id="more"></a><img src="/2018/10/12/Harbor-setting/harbor_dir.png"><p>编辑文件：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># vim docker-compose.yml</span></span><br><span class="line">proxy:</span><br><span class="line">    image: vmware/nginx-photon:1.11.13</span><br><span class="line">    container_name: nginx</span><br><span class="line">    restart: always</span><br><span class="line">    volumes:</span><br><span class="line">      - ./common/config/nginx:/etc/nginx:z</span><br><span class="line">    networks:</span><br><span class="line">      - harbor</span><br><span class="line">    ports:</span><br><span class="line">      - 8088:80</span><br><span class="line">      - 443:443</span><br><span class="line">      - 4443:4443</span><br><span class="line">    depends_on:</span><br><span class="line">      - mysql</span><br><span class="line">      - registry</span><br><span class="line">      - ui</span><br><span class="line">      - <span class="built_in">log</span></span><br><span class="line">    logging:</span><br><span class="line">      driver: <span class="string">"syslog"</span></span><br><span class="line">      options:</span><br><span class="line">        syslog-address: <span class="string">"tcp://127.0.0.1:1514"</span></span><br><span class="line">        tag: <span class="string">"proxy"</span></span><br></pre></td></tr></table></figure></p><h3 id="修改common-templates-registry-config-yml文件仓库地址"><a href="#修改common-templates-registry-config-yml文件仓库地址" class="headerlink" title="修改common/templates/registry/config.yml文件仓库地址"></a>修改common/templates/registry/config.yml文件仓库地址</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># vim common/templates/registry/config.yml</span></span><br><span class="line"><span class="comment"># 找到如下地方，添加端口号</span></span><br><span class="line">auth:</span><br><span class="line">  token:</span><br><span class="line">    issuer: harbor-token-issuer</span><br><span class="line">    realm: <span class="variable">$ui_url</span>:8088/service/token</span><br><span class="line">    rootcertbundle: /etc/registry/root.crt</span><br><span class="line">    service: harbor-registry</span><br></pre></td></tr></table></figure><h3 id="停止harbor，重新启动并生成配置文件"><a href="#停止harbor，重新启动并生成配置文件" class="headerlink" title="停止harbor，重新启动并生成配置文件"></a>停止harbor，重新启动并生成配置文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># docker-compose stop</span></span><br><span class="line"><span class="comment"># ./install.sh</span></span><br></pre></td></tr></table></figure><h3 id="遇到问题："><a href="#遇到问题：" class="headerlink" title="遇到问题："></a>遇到问题：</h3><ol><li>停止服务后，在生成配置文件的时候，无法删除容器，提示“磁盘在忙”，由于容器挂载数据卷，无法直接删除。<blockquote><p>解决：先查出进程ID 进行杀掉，然后再删除：</p></blockquote></li></ol><img src="/2018/10/12/Harbor-setting/harbor_kill.png"><p>代码：（example）<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">grep c413f59ac6f0395634567891119784ad3ec61aad98892624395b57388beb3dae /proc/*/mountinfo</span><br><span class="line"><span class="built_in">kill</span> -9 进程ID</span><br></pre></td></tr></table></figure></p><p>重新运行 <code>install.sh</code></p><p>参考地址：</p><ul><li><a href="https://www.cnblogs.com/huangjc/p/6420355.html" target="_blank" rel="noopener">https://www.cnblogs.com/huangjc/p/6420355.html</a></li><li><a href="https://www.cnblogs.com/zhink/p/9244917.html" target="_blank" rel="noopener">https://www.cnblogs.com/zhink/p/9244917.html</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;背景：之前安装Harbor时默认安装的，服务端口默认占用80和443，后来有同事要用到80端口，为了满足同时的需求，不得不麻烦自己修改端口了。&lt;/p&gt;
&lt;h3 id=&quot;修改docker-compose-yml文件端口映射为1180-gt-80&quot;&gt;&lt;a href=&quot;#修改docker-compose-yml文件端口映射为1180-gt-80&quot; class=&quot;headerlink&quot; title=&quot;修改docker-compose.yml文件端口映射为1180 &amp;gt; 80:&quot;&gt;&lt;/a&gt;修改docker-compose.yml文件端口映射为1180 &amp;gt; 80:&lt;/h3&gt;&lt;p&gt;在Harbor路径下找到文件 docker-compose.yml，我本地路径是 /usr/local/harbor&lt;/p&gt;
    
    </summary>
    
      <category term="Docker" scheme="http://aikaiqiang.coding.me/categories/Docker/"/>
    
    
      <category term="Docker" scheme="http://aikaiqiang.coding.me/tags/Docker/"/>
    
      <category term="Harbor" scheme="http://aikaiqiang.coding.me/tags/Harbor/"/>
    
      <category term="Docker Registry" scheme="http://aikaiqiang.coding.me/tags/Docker-Registry/"/>
    
  </entry>
  
  <entry>
    <title>本地Docker镜像仓库Harbor搭建</title>
    <link href="http://aikaiqiang.coding.me/2018/10/11/Docker-harbor/"/>
    <id>http://aikaiqiang.coding.me/2018/10/11/Docker-harbor/</id>
    <published>2018-10-11T07:40:50.000Z</published>
    <updated>2019-02-20T08:23:43.881Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>摘要：Harbor是一个用于存储和分发Docker镜像的企业级Registry服务器，通过添加一些企业必需的功能特性</p></blockquote><h3 id="关于Harbor"><a href="#关于Harbor" class="headerlink" title="关于Harbor"></a>关于Harbor</h3><p>Harbor是一个用于存储和分发Docker镜像的企业级Registry服务器，通过添加一些企业必需的功能特性，例如安全、标识和管理等，扩展了开源Docker Distribution。作为一个企业级私有Registry服务器，Harbor提供了更好的性能和安全。提升用户使用Registry构建和运行环境传输镜像的效率。Harbor支持安装在多个Registry节点的镜像资源复制，镜像全部保存在私有Registry中， 确保数据和知识产权在公司内部网络中管控。另外，Harbor也提供了高级的安全特性，诸如用户管理，访问控制和活动审计等 ；</p><a id="more"></a><h3 id="安装Harbor"><a href="#安装Harbor" class="headerlink" title="安装Harbor"></a>安装Harbor</h3><p>安装环境：CentOS Linux release 7.2.1511 (Core )</p><h4 id="安装Docker"><a href="#安装Docker" class="headerlink" title="安装Docker"></a>安装Docker</h4><h4 id="安装Docker-Compose"><a href="#安装Docker-Compose" class="headerlink" title="安装Docker-Compose"></a>安装Docker-Compose</h4><ul><li>二进制安装</li><li>pip安装</li></ul><h4 id="安装Harbor-1"><a href="#安装Harbor-1" class="headerlink" title="安装Harbor"></a>安装Harbor</h4><h5 id="在线安装"><a href="#在线安装" class="headerlink" title="在线安装"></a>在线安装</h5><h6 id="下载文件："><a href="#下载文件：" class="headerlink" title="下载文件："></a>下载文件：</h6><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -P <span class="regexp">/usr/</span>local<span class="regexp">/src/</span>     https:<span class="regexp">//gi</span>thub.com<span class="regexp">/vmware/</span>harbor<span class="regexp">/releases/</span>download<span class="regexp">/v1.2.0/</span>harbor-online-installer-v1.<span class="number">2.0</span>.tgz</span><br></pre></td></tr></table></figure><h6 id="解压文件："><a href="#解压文件：" class="headerlink" title="解压文件："></a>解压文件：</h6><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar zxf harbor-online-installer-v1<span class="number">.2</span><span class="number">.0</span>.tgz  -C /usr/local/</span><br></pre></td></tr></table></figure><h6 id="修改配置文件："><a href="#修改配置文件：" class="headerlink" title="修改配置文件："></a>修改配置文件：</h6><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/harbor/</span><br><span class="line">vim harbor.cfg</span><br><span class="line"><span class="comment"># 域名设置</span></span><br><span class="line">hostname = reg.hancloud.cn</span><br><span class="line"><span class="comment"># 邮箱设置</span></span><br><span class="line">email_server = smtp.hancloud.cn</span><br><span class="line">email_server_port = 25</span><br><span class="line">email_username = aikaiqiang@hancloud.cn</span><br><span class="line">email_password = @akq930210</span><br><span class="line">email_from = aikaiqiang &lt;aikaiqiang@hancloud.cn&gt;</span><br><span class="line">email_ssl = false</span><br><span class="line"><span class="comment"># 禁止用户注册</span></span><br><span class="line">self_registration = off</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置只有管理员可以创建项目</span></span><br><span class="line">project_creation_restriction = adminonly</span><br></pre></td></tr></table></figure><h6 id="执行安装脚本："><a href="#执行安装脚本：" class="headerlink" title="执行安装脚本："></a>执行安装脚本：</h6><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line">./install.<span class="keyword">sh</span></span><br><span class="line"># 执行过程</span><br><span class="line">[Step <span class="number">0</span>]: checking installation environment ...</span><br><span class="line"></span><br><span class="line">Note: docker <span class="keyword">version</span>: <span class="number">1.13</span>.<span class="number">1</span></span><br><span class="line"></span><br><span class="line">Note: docker-compose <span class="keyword">version</span>: <span class="number">1.22</span>.<span class="number">0</span></span><br><span class="line">      </span><br><span class="line">[Step <span class="number">1</span>]: preparing environment ...</span><br><span class="line">Generated <span class="built_in">and</span> saved secret <span class="keyword">to</span> <span class="keyword">file</span>: /data/secretkey</span><br><span class="line">Generated configuration <span class="keyword">file</span>: ./common/config/nginx/nginx.<span class="keyword">conf</span></span><br><span class="line">Generated configuration <span class="keyword">file</span>: ./common/config/adminserver/env</span><br><span class="line">Generated configuration <span class="keyword">file</span>: ./common/config/ui/env</span><br><span class="line">Generated configuration <span class="keyword">file</span>: ./common/config/registry/config.yml</span><br><span class="line">Generated configuration <span class="keyword">file</span>: ./common/config/db/env</span><br><span class="line">Generated configuration <span class="keyword">file</span>: ./common/config/jobservice/env</span><br><span class="line">Generated configuration <span class="keyword">file</span>: ./common/config/jobservice/app.<span class="keyword">conf</span></span><br><span class="line">Generated configuration <span class="keyword">file</span>: ./common/config/ui/app.<span class="keyword">conf</span></span><br><span class="line">Generated certificate, key <span class="keyword">file</span>: ./common/config/ui/private_key.pem, cert <span class="keyword">file</span>: ./common/config/registry/root.crt</span><br><span class="line">The configuration <span class="keyword">files</span> are ready, please use docker-compose <span class="keyword">to</span> start the service.</span><br><span class="line">  </span><br><span class="line">[Step <span class="number">2</span>]: checking existing instance of Harbor ...</span><br><span class="line">    </span><br><span class="line">[Step <span class="number">3</span>]: starting Harbor ...</span><br><span class="line">Creating network <span class="string">"harbor_harbor"</span> with the default driver</span><br><span class="line">Pulling <span class="built_in">log</span> (vmware/harbor-<span class="keyword">lo</span><span class="variable">g:v1</span>.<span class="number">2.0</span>)...</span><br><span class="line">Trying <span class="keyword">to</span> pull repository docker.io/vmware/harbor-<span class="built_in">log</span> ... </span><br><span class="line">v1.<span class="number">2.0</span>: Pulling from docker.io/vmware/harbor-<span class="built_in">log</span></span><br><span class="line"><span class="number">93</span>b3dcee11d6: Pull <span class="built_in">complete</span></span><br><span class="line"><span class="number">07</span>d028a1dbdd: Pull <span class="built_in">complete</span></span><br><span class="line"><span class="number">208723</span>cd598<span class="variable">a:</span> Pull <span class="built_in">complete</span></span><br><span class="line">b876b05989fc: Pull <span class="built_in">complete</span></span><br><span class="line"><span class="number">12</span>f0e0ef448<span class="variable">a:</span> Pull <span class="built_in">complete</span></span><br><span class="line">Diges<span class="variable">t:</span> <span class="built_in">sha256</span>:<span class="number">608</span>e10b7aaac07e10a4cd639d8848aef96daa7dd5c7ebaaf6a7ecd47f903e1f8</span><br><span class="line">Statu<span class="variable">s:</span> Downloaded newer image <span class="keyword">for</span> docker.io/vmware/harbor-<span class="keyword">lo</span><span class="variable">g:v1</span>.<span class="number">2.0</span></span><br><span class="line">Pulling registry (vmware/registry:<span class="number">2.6</span>.<span class="number">2</span>-photon)...</span><br><span class="line">Trying <span class="keyword">to</span> pull repository docker.io/vmware/registry ... </span><br><span class="line"><span class="number">2.6</span>.<span class="number">2</span>-photon: Pulling from docker.io/vmware/registry</span><br><span class="line"><span class="number">4</span>b40d82f242f: Pull <span class="built_in">complete</span></span><br><span class="line">f01e70edcc2<span class="variable">b:</span> Pull <span class="built_in">complete</span></span><br><span class="line"><span class="number">798027835</span>c5f: Pull <span class="built_in">complete</span></span><br><span class="line"><span class="number">8652</span>f3177ad3: Pull <span class="built_in">complete</span></span><br><span class="line"><span class="number">4753</span>e541e7b5: Pull <span class="built_in">complete</span></span><br><span class="line"><span class="number">058</span>f3d3811f4: Pull <span class="built_in">complete</span></span><br><span class="line">c6edb6ed847<span class="variable">b:</span> Pull <span class="built_in">complete</span></span><br><span class="line">Diges<span class="variable">t:</span> <span class="built_in">sha256</span>:d7cdde865c1fc389900f1929d9c4865fd1b598ca9be3f27bbe900339a10a5788</span><br><span class="line">Statu<span class="variable">s:</span> Downloaded newer image <span class="keyword">for</span> docker.io/vmware/registry:<span class="number">2.6</span>.<span class="number">2</span>-photon</span><br><span class="line">Pulling mysql (vmware/harbor-d<span class="variable">b:v1</span>.<span class="number">2.0</span>)...</span><br><span class="line">Trying <span class="keyword">to</span> pull repository docker.io/vmware/harbor-db ... </span><br><span class="line">v1.<span class="number">2.0</span>: Pulling from docker.io/vmware/harbor-db</span><br><span class="line">df559435c037: Pull <span class="built_in">complete</span></span><br><span class="line">a6310a57af5d: Pull <span class="built_in">complete</span></span><br><span class="line">d13d90890144: Pull <span class="built_in">complete</span></span><br><span class="line">b694d8967a6c: Pull <span class="built_in">complete</span></span><br><span class="line">a34f6cef56a6: Pull <span class="built_in">complete</span></span><br><span class="line"><span class="number">3519</span>eec83af5: Pull <span class="built_in">complete</span></span><br><span class="line"><span class="number">34</span>bae610e56c: Pull <span class="built_in">complete</span></span><br><span class="line"><span class="number">86</span>a867bebd89: Pull <span class="built_in">complete</span></span><br><span class="line"><span class="number">3</span>db2d0ac366e: Pull <span class="built_in">complete</span></span><br><span class="line">c0d307ee295f: Pull <span class="built_in">complete</span></span><br><span class="line">c5b1b404c5ee: Pull <span class="built_in">complete</span></span><br><span class="line"><span class="number">14</span>f4a4328366: Pull <span class="built_in">complete</span></span><br><span class="line">c7fa77b46ec4: Pull <span class="built_in">complete</span></span><br><span class="line"><span class="number">0</span>cbe2b5669b8: Pull <span class="built_in">complete</span></span><br><span class="line">Diges<span class="variable">t:</span> <span class="built_in">sha256</span>:c10b3555beb6d1c851ae49a4e90ef4296a1ad42bcd1a58ae97e316b034515b6e</span><br><span class="line">Statu<span class="variable">s:</span> Downloaded newer image <span class="keyword">for</span> docker.io/vmware/harbor-d<span class="variable">b:v1</span>.<span class="number">2.0</span></span><br><span class="line">Pulling adminserver (vmware/harbor-adminserver:v1.<span class="number">2.0</span>)...</span><br><span class="line">Trying <span class="keyword">to</span> pull repository docker.io/vmware/harbor-adminserver ... </span><br><span class="line">v1.<span class="number">2.0</span>: Pulling from docker.io/vmware/harbor-adminserver</span><br><span class="line"><span class="number">93</span>b3dcee11d6: Already <span class="built_in">exists</span></span><br><span class="line"><span class="number">6</span>ab21236e58<span class="variable">b:</span> Pull <span class="built_in">complete</span></span><br><span class="line">f70b0efff900: Pull <span class="built_in">complete</span></span><br><span class="line">c5d206b5e184: Pull <span class="built_in">complete</span></span><br><span class="line">Diges<span class="variable">t:</span> <span class="built_in">sha256</span>:aba66ec90fc12fe0814cecc9f647f5d17b41395199821cc7af69db9c0fbe446c</span><br><span class="line">Statu<span class="variable">s:</span> Downloaded newer image <span class="keyword">for</span> docker.io/vmware/harbor-adminserver:v1.<span class="number">2.0</span></span><br><span class="line">Pulling ui (vmware/harbor-ui:v1.<span class="number">2.0</span>)...</span><br><span class="line">Trying <span class="keyword">to</span> pull repository docker.io/vmware/harbor-ui ... </span><br><span class="line">v1.<span class="number">2.0</span>: Pulling from docker.io/vmware/harbor-ui</span><br><span class="line"><span class="number">93</span>b3dcee11d6: Already <span class="built_in">exists</span></span><br><span class="line"><span class="number">6</span>ab21236e58<span class="variable">b:</span> Already <span class="built_in">exists</span></span><br><span class="line"><span class="number">7753</span>f4b55df6: Pull <span class="built_in">complete</span></span><br><span class="line">a647b33bdf74: Pull <span class="built_in">complete</span></span><br><span class="line">eb30db926101: Pull <span class="built_in">complete</span></span><br><span class="line"><span class="number">204</span>d77847826: Pull <span class="built_in">complete</span></span><br><span class="line"><span class="number">4910</span>a0b56c59: Pull <span class="built_in">complete</span></span><br><span class="line">e880a4b0031f: Pull <span class="built_in">complete</span></span><br><span class="line">Diges<span class="variable">t:</span> <span class="built_in">sha256</span>:b198d8f2f59515d286bdcf06c7f99c370eb4475e2547495c3e1db8761940646b</span><br><span class="line">Statu<span class="variable">s:</span> Downloaded newer image <span class="keyword">for</span> docker.io/vmware/harbor-ui:v1.<span class="number">2.0</span></span><br><span class="line">Pulling jobservice (vmware/harbor-jobservice:v1.<span class="number">2.0</span>)...</span><br><span class="line">Trying <span class="keyword">to</span> pull repository docker.io/vmware/harbor-jobservice ... </span><br><span class="line">v1.<span class="number">2.0</span>: Pulling from docker.io/vmware/harbor-jobservice</span><br><span class="line"><span class="number">93</span>b3dcee11d6: Already <span class="built_in">exists</span></span><br><span class="line"><span class="number">6</span>ab21236e58<span class="variable">b:</span> Already <span class="built_in">exists</span></span><br><span class="line"><span class="number">64</span>bd0172d071: Pull <span class="built_in">complete</span></span><br><span class="line">b4f5382f226f: Pull <span class="built_in">complete</span></span><br><span class="line">Diges<span class="variable">t:</span> <span class="built_in">sha256</span>:<span class="number">0692648176</span>c1c87379025b0519036b9f3f1a0eceb2646f17dd40eb143c898d5c</span><br><span class="line">Statu<span class="variable">s:</span> Downloaded newer image <span class="keyword">for</span> docker.io/vmware/harbor-jobservice:v1.<span class="number">2.0</span></span><br><span class="line">Pulling proxy (vmware/nginx-photon:<span class="number">1.11</span>.<span class="number">13</span>)...</span><br><span class="line">Trying <span class="keyword">to</span> pull repository docker.io/vmware/nginx-photon ... </span><br><span class="line"><span class="number">1.11</span>.<span class="number">13</span>: Pulling from docker.io/vmware/nginx-photon</span><br><span class="line"><span class="number">4</span>b40d82f242f: Already <span class="built_in">exists</span></span><br><span class="line"><span class="number">2</span>dcfe2cb4f13: Pull <span class="built_in">complete</span></span><br><span class="line">Diges<span class="variable">t:</span> <span class="built_in">sha256</span>:<span class="number">5</span>a32f122b86f2d7794651f1a67c5e9ce1dce79b0e0c1bc25d559405312c156db</span><br><span class="line">Statu<span class="variable">s:</span> Downloaded newer image <span class="keyword">for</span> docker.io/vmware/nginx-photon:<span class="number">1.11</span>.<span class="number">13</span></span><br><span class="line">Creating harbor-<span class="built_in">log</span> ... done</span><br><span class="line">Creating registry           ... done</span><br><span class="line">Creating harbor-adminserver ... done</span><br><span class="line">Creating harbor-db          ... done</span><br><span class="line">Creating harbor-ui          ... done</span><br><span class="line">Creating harbor-jobservice  ... done</span><br><span class="line">Creating nginx              ... done</span><br><span class="line"></span><br><span class="line">✔ ----Harbor <span class="built_in">has</span> been installed <span class="built_in">and</span> started successfully.----</span><br><span class="line"></span><br><span class="line">Now you should <span class="keyword">be</span> able <span class="keyword">to</span> visit the admin portal at http://<span class="keyword">reg</span>.hancloud.<span class="keyword">cn</span>. </span><br><span class="line">For more details, please visit http<span class="variable">s:</span>//github.<span class="keyword">com</span>/vmware/harbor</span><br></pre></td></tr></table></figure><p>执行成功！<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看本地镜像文件，会多处如图几个镜像</span></span><br><span class="line"><span class="attribute">docker</span> images</span><br></pre></td></tr></table></figure></p><img src="/2018/10/11/Docker-harbor/harbor_images.png"><p>Harbor 管理是通过docker-compose来完成的，Harbor本身有多个服务进程，都放在docker容器之中运行，我们可以通过docker ps或者docker-compose  ps命令查看 ;</p><img src="/2018/10/11/Docker-harbor/harbor-docker-compose.png"><h6 id="Harbor的启动和停止-："><a href="#Harbor的启动和停止-：" class="headerlink" title="Harbor的启动和停止 ："></a>Harbor的启动和停止 ：</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动Harbor</span></span><br><span class="line">docker-compose start</span><br><span class="line"><span class="comment"># 停止Harbor</span></span><br><span class="line">docker-comose stop</span><br><span class="line"><span class="comment"># 重启Harbor</span></span><br><span class="line">docker-compose restart</span><br></pre></td></tr></table></figure><h6 id="访问测试"><a href="#访问测试" class="headerlink" title="访问测试:"></a>访问测试:</h6><p>在浏览器输入 reg.hancloud.cn，harbor.cfg文件配置的域名为reg.hancloud.cn，默认账号/密码：admin/Harbor12345</p><img src="/2018/10/11/Docker-harbor/harbor-index.png"><h5 id="上传下载镜像"><a href="#上传下载镜像" class="headerlink" title="上传下载镜像"></a>上传下载镜像</h5><h6 id="指定仓库地址"><a href="#指定仓库地址" class="headerlink" title="指定仓库地址"></a>指定仓库地址</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/docker/daemon.json</span><br><span class="line"></span><br><span class="line">&#123; <span class="string">"insecure-registries"</span>:[<span class="string">"reg.hancloud.cn"</span>] &#125;</span><br></pre></td></tr></table></figure><p>重启docker：<code>systemctl  restart docker</code> </p><h6 id="创建Dockerfile"><a href="#创建Dockerfile" class="headerlink" title="创建Dockerfile"></a>创建Dockerfile</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vim Dockerfile </span><br><span class="line">FROM centos:centos7.1.1503</span><br><span class="line">ENV TZ <span class="string">"Asia/Shanghai"</span></span><br></pre></td></tr></table></figure><h6 id="创建镜像"><a href="#创建镜像" class="headerlink" title="创建镜像"></a>创建镜像</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># docker build -t reg.hanclound.cn/library/centos7.1:V0.0.1 .</span></span><br></pre></td></tr></table></figure><h6 id="把镜像push到Harbor"><a href="#把镜像push到Harbor" class="headerlink" title="把镜像push到Harbor"></a>把镜像push到Harbor</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># docker login reg.hanclound.cn</span></span><br><span class="line"><span class="comment"># docker push reg.hanclound.cn/library/centos7.1:V0.0.1</span></span><br></pre></td></tr></table></figure><h4 id="配置TLS证书"><a href="#配置TLS证书" class="headerlink" title="配置TLS证书"></a>配置TLS证书</h4><h5 id="修改配置文件harbor-cfg"><a href="#修改配置文件harbor-cfg" class="headerlink" title="修改配置文件harbor.cfg"></a>修改配置文件harbor.cfg</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hostname = 域名</span><br><span class="line">ui_url_protocol = https</span><br><span class="line">ssl_cert = /etc/certs/ca.crt</span><br><span class="line">ssl_cert_key = /etc/certs/ca.key</span><br></pre></td></tr></table></figure><h5 id="创建自签名证书key文件"><a href="#创建自签名证书key文件" class="headerlink" title="创建自签名证书key文件"></a>创建自签名证书key文件</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir /etc/certs</span><br><span class="line">openssl genrsa -out /etc/certs/ca.key 2048</span><br></pre></td></tr></table></figure><h5 id="创建自签名证书crt文件"><a href="#创建自签名证书crt文件" class="headerlink" title="创建自签名证书crt文件"></a>创建自签名证书crt文件</h5><p>注意：命令中<code>/CN=reg.hanclound.cn</code>字段中<code>reg.hanclound.cn</code>修改为自己配置的仓库域名<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl req -x509 -new -nodes -key /etc/certs/ca.key -subj <span class="string">"/CN=rgs.unixfbi.com"</span> -days 5000 -out /etc/certs/ca.crt</span><br></pre></td></tr></table></figure></p><h5 id="安装Harbor-2"><a href="#安装Harbor-2" class="headerlink" title="安装Harbor"></a>安装Harbor</h5><p><code>./install.sh</code> </p><h5 id="客户端配置"><a href="#客户端配置" class="headerlink" title="客户端配置"></a>客户端配置</h5><p>客户端需要创建证书文件存放的位置，并且把服务端创建的证书拷贝到该目录下，然后重启客户端docker。我们这里创建目录为：`/etc/docker/certs.d/reg.hanclound.cn ;</p><p>把服务端crt证书文件拷贝到客户端，例如我这的客户端为：192.168.0.94;<br><code># scp /etc/certs/ca.crt root@192.168.0.94:/etc/docker/certs.d/reg.hanclound.cn/</code><br>重启客户端docker<br><code>systemctl restart docker</code> </p><p>参考文案：</p><p>博客：<a href="https://www.cnblogs.com/pangguoping/p/7650014.html" target="_blank" rel="noopener">运维特工</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;摘要：Harbor是一个用于存储和分发Docker镜像的企业级Registry服务器，通过添加一些企业必需的功能特性&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;关于Harbor&quot;&gt;&lt;a href=&quot;#关于Harbor&quot; class=&quot;headerlink&quot; title=&quot;关于Harbor&quot;&gt;&lt;/a&gt;关于Harbor&lt;/h3&gt;&lt;p&gt;Harbor是一个用于存储和分发Docker镜像的企业级Registry服务器，通过添加一些企业必需的功能特性，例如安全、标识和管理等，扩展了开源Docker Distribution。作为一个企业级私有Registry服务器，Harbor提供了更好的性能和安全。提升用户使用Registry构建和运行环境传输镜像的效率。Harbor支持安装在多个Registry节点的镜像资源复制，镜像全部保存在私有Registry中， 确保数据和知识产权在公司内部网络中管控。另外，Harbor也提供了高级的安全特性，诸如用户管理，访问控制和活动审计等 ；&lt;/p&gt;
    
    </summary>
    
      <category term="Docker" scheme="http://aikaiqiang.coding.me/categories/Docker/"/>
    
    
      <category term="Docker" scheme="http://aikaiqiang.coding.me/tags/Docker/"/>
    
      <category term="Harbor" scheme="http://aikaiqiang.coding.me/tags/Harbor/"/>
    
      <category term="Docker Registry" scheme="http://aikaiqiang.coding.me/tags/Docker-Registry/"/>
    
  </entry>
  
  <entry>
    <title>IDEA常用快捷键</title>
    <link href="http://aikaiqiang.coding.me/2018/10/11/Tool-idea/"/>
    <id>http://aikaiqiang.coding.me/2018/10/11/Tool-idea/</id>
    <published>2018-10-11T07:34:25.000Z</published>
    <updated>2019-02-20T08:23:43.893Z</updated>
    
    <content type="html"><![CDATA[<h2 id="IDEA-快捷键"><a href="#IDEA-快捷键" class="headerlink" title="IDEA 快捷键"></a>IDEA 快捷键</h2><p>Ctrl+Shift + Enter，语句完成<br>“！”，否定完成，输入表达式时按 “！”键</p><a id="more"></a><h4 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h4><p>Ctrl+E，最近的文件<br>Ctrl+Shift+E，最近更改的文件<br>Shift+Click，可以关闭文件<br>Ctrl+[ OR ]，可以跑到大括号的开头与结尾<br>Ctrl+F12，可以显示当前文件的结构<br>Ctrl+F7，可以查询当前元素在当前文件中的引用，然后按 F3 可以选择<br>Ctrl+N，可以快速打开类<br>Ctrl+Shift+N，可以快速打开文件<br>Alt+Q，可以看到当前方法的声明<br>Ctrl+P，可以显示参数信息<br>Ctrl+Shift+Insert，可以选择剪贴板内容并插入<br>Alt+Insert，可以生成构造器/Getter/Setter等<br>Ctrl+Alt+V，可以引入变量。例如：new String(); 自动导入变量定义<br>Ctrl+Alt+T，可以把代码包在一个块内，例如：try/catch<br>Ctrl+Enter，导入包，自动修正<br>Ctrl+Alt+L，格式化代码<br>Ctrl+Alt+I，将选中的代码进行自动缩进编排，这个功能在编辑 JSP 文件时也可以工作<br>Ctrl+Alt+O，优化导入的类和包<br>Ctrl+R，替换文本<br>Ctrl+F，查找文本<br>Ctrl+Shift+Space，自动补全代码<br>Ctrl+空格，代码提示（与系统输入法快捷键冲突）<br>Ctrl+Shift+Alt+N，查找类中的方法或变量<br>Alt+Shift+C，最近的更改<br>Alt+Shift+Up/Down，上/下移一行<br>Shift+F6，重构 – 重命名<br>Ctrl+X，<strong>删除行</strong><br>Ctrl+D，<strong>复制行</strong><br>Ctrl+/或Ctrl+Shift+/，注释（//或者/**/）<br>Ctrl+J，自动代码（例如：serr）<br>Ctrl+Alt+J，用动态模板环绕<br>Ctrl+H，显示类结构图（类的继承层次）<br>Ctrl+Q，显示注释文档<br>Alt+F1，查找代码所在位置<br>Alt+1，快速打开或隐藏工程面板<br>Ctrl+Alt+left/right，返回至上次浏览的位置<br>Alt+left/right，切换代码视图<br>Alt+Up/Down，在方法间快速移动定位<br>Ctrl+Shift+Up/Down，向上/下移动语句<br>F2 或 Shift+F2，高亮错误或警告快速定位<br>Tab，代码标签输入完成后，按 Tab，生成代码<br>Ctrl+Shift+F7，高亮显示所有该文本，按 Esc 高亮消失<br>Alt+F3，逐个往下查找相同文本，并高亮显示<br>Ctrl+Up/Down，光标中转到第一行或最后一行下<br>Ctrl+B/Ctrl+Click，快速打开光标处的类或方法（跳转到定义处）<br>Ctrl+Alt+B，跳转到方法实现处<br>Ctrl+Shift+Backspace，跳转到上次编辑的地方<br>Ctrl+O，重写方法<br>Ctrl+Alt+Space，类名自动完成<br>Ctrl+Alt+Up/Down，快速跳转搜索结果<br>Ctrl+Shift+J，整合两行<br>Alt+F8，计算变量值<br>Ctrl+Shift+V，可以将最近使用的剪贴板内容选择插入到文本<br>Ctrl+Alt+Shift+V，简单粘贴<br>Shift+Esc，不仅可以把焦点移到编辑器上，而且还可以隐藏当前（或最后活动的）工具窗口<br>F12，把焦点从编辑器移到最近使用的工具窗口<br>Shift+F1，要打开编辑器光标字符处使用的类或者方法 Java 文档的浏览器<br>Ctrl+W，可以选择单词继而语句继而行继而函数<br>Ctrl+Shift+W，取消选择光标所在词<br>Alt+F7，查找整个工程中使用地某一个类、方法或者变量的位置<br>Ctrl+I，实现方法<br>Ctrl+Shift+U，大小写转化<br>Ctrl+Y，删除当前行</p><p>Shift+Enter，向下插入新行<br>psvm/sout，main/System.out.println(); Ctrl+J，查看更多<br>Ctrl+Shift+F，全局查找<br>Ctrl+F，查找/Shift+F3，向上查找/F3，向下查找<br>Ctrl+Shift+S，高级搜索<br>Ctrl+U，转到父类<br>Ctrl+Alt+S，打开设置对话框<br>Alt+Shift+Inert，开启/关闭列选择模式<br>Ctrl+Alt+Shift+S，打开当前项目/模块属性<br>Ctrl+G，定位行<br>Alt+Home，跳转到导航栏<br>Ctrl+Enter，上插一行<br>Ctrl+Backspace，按单词删除<br>Ctrl+”+/-”，当前方法展开、折叠<br>Ctrl+Shift+”+/-”，全部展开、折叠</p><h4 id="调试部分、编译"><a href="#调试部分、编译" class="headerlink" title="调试部分、编译"></a>调试部分、编译</h4><p>Ctrl+F2，停止<br>Alt+Shift+F9，选择 Debug<br>Alt+Shift+F10，选择 Run<br>Ctrl+Shift+F9，编译<br>Ctrl+Shift+F10，运行<br>Ctrl+Shift+F8，查看断点<br>F8，步过<br>F7，步入<br>Shift+F7，智能步入<br>Shift+F8，步出<br>Alt+Shift+F8，强制步过<br>Alt+Shift+F7，强制步入<br>Alt+F9，运行至光标处<br>Ctrl+Alt+F9，强制运行至光标处<br>F9，恢复程序<br>Alt+F10，定位到断点<br>Ctrl+F8，切换行断点<br>Ctrl+F9，生成项目<br>Alt+1，项目<br>Alt+2，收藏<br>Alt+6，TODO<br>Alt+7，结构<br>Ctrl+Shift+C，复制路径<br>Ctrl+Alt+Shift+C，复制引用，必须选择类名<br>Ctrl+Alt+Y，同步<br>Ctrl+~，快速切换方案（界面外观、代码风格、快捷键映射等菜单）<br>Shift+F12，还原默认布局<br>Ctrl+Shift+F12，隐藏/恢复所有窗口<br>Ctrl+F4，关闭<br>Ctrl+Shift+F4，关闭活动选项卡<br>Ctrl+Tab，转到下一个拆分器<br>Ctrl+Shift+Tab，转到上一个拆分器</p><h4 id="重构"><a href="#重构" class="headerlink" title="重构"></a>重构</h4><p>Ctrl+Alt+Shift+T，弹出重构菜单<br>Shift+F6，重命名<br>F6，移动<br>F5，复制<br>Alt+Delete，安全删除<br>Ctrl+Alt+N，内联</p><h4 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h4><p>Ctrl+F，查找<br>Ctrl+R，替换<br>F3，查找下一个<br>Shift+F3，查找上一个<br>Ctrl+Shift+F，在路径中查找<br>Ctrl+Shift+R，在路径中替换<br>Ctrl+Shift+S，搜索结构<br>Ctrl+Shift+M，替换结构<br>Alt+F7，查找用法<br>Ctrl+Alt+F7，显示用法<br>Ctrl+F7，在文件中查找用法<br>Ctrl+Shift+F7，在文件中高亮显示用法</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;IDEA-快捷键&quot;&gt;&lt;a href=&quot;#IDEA-快捷键&quot; class=&quot;headerlink&quot; title=&quot;IDEA 快捷键&quot;&gt;&lt;/a&gt;IDEA 快捷键&lt;/h2&gt;&lt;p&gt;Ctrl+Shift + Enter，语句完成&lt;br&gt;“！”，否定完成，输入表达式时按 “！”键&lt;/p&gt;
    
    </summary>
    
      <category term="工具" scheme="http://aikaiqiang.coding.me/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="IDEA" scheme="http://aikaiqiang.coding.me/tags/IDEA/"/>
    
      <category term="工具" scheme="http://aikaiqiang.coding.me/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>Docker+Rancher+Docker registry服务镜像化</title>
    <link href="http://aikaiqiang.coding.me/2018/09/30/Docker-rancher/"/>
    <id>http://aikaiqiang.coding.me/2018/09/30/Docker-rancher/</id>
    <published>2018-09-30T08:00:54.000Z</published>
    <updated>2019-02-20T08:23:43.885Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>摘要：本次操作基于CentOS 7部署</p></blockquote><h3 id="安装Docker"><a href="#安装Docker" class="headerlink" title="安装Docker"></a>安装Docker</h3><h4 id="利用yum工具安装docker"><a href="#利用yum工具安装docker" class="headerlink" title="利用yum工具安装docker"></a>利用yum工具安装docker</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install docker</span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="启动docker"><a href="#启动docker" class="headerlink" title="启动docker"></a>启动docker</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start docker</span><br></pre></td></tr></table></figure><p>输入上面命令后，报错如图:</p><img src="/2018/09/30/Docker-rancher/1_start_error.png" title="启动报错"><p>根据提示输入命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl status docker.service</span><br></pre></td></tr></table></figure></p><p>输出信息如下:</p><img src="/2018/09/30/Docker-rancher/2_status_docker.png" title="启动报错"><p>输出指出：SELinux 不支持overlay2，所以要关闭SELinux，编辑文件 <code>/etc/sysconfig/docker</code> :</p><p><code>vi /etc/sysconfig/docker</code></p><img src="/2018/09/30/Docker-rancher/3_edit_docker_config.png" title="修改配置docker文件"><p>重启docker： <code>systemctl restart docker</code></p><h4 id="查看docker服务状态"><a href="#查看docker服务状态" class="headerlink" title="查看docker服务状态"></a>查看docker服务状态</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl status docker</span><br></pre></td></tr></table></figure><img src="/2018/09/30/Docker-rancher/4_docker_status.png" title="查看docker服务状态"><p>到此docker已经安装并成功启动。。。</p><hr><h4 id="将docker服务加入开启自启动"><a href="#将docker服务加入开启自启动" class="headerlink" title="将docker服务加入开启自启动"></a>将docker服务加入开启自启动</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="built_in">enable</span> docker</span><br></pre></td></tr></table></figure><h4 id="修改docker镜像地址为国内官方地址，重启docker是配置生效；"><a href="#修改docker镜像地址为国内官方地址，重启docker是配置生效；" class="headerlink" title="修改docker镜像地址为国内官方地址，重启docker是配置生效；"></a>修改docker镜像地址为国内官方地址，重启docker是配置生效；</h4><p><code>vim /etc/docker/daemon.json</code></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">"registry-mirrors"</span>: [<span class="string">"https://registry.docker-cn.com"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="修改docker镜像和容器的存储位置，Docker默认的镜像和容器存储位置在-var-lib-docker-："><a href="#修改docker镜像和容器的存储位置，Docker默认的镜像和容器存储位置在-var-lib-docker-：" class="headerlink" title="修改docker镜像和容器的存储位置，Docker默认的镜像和容器存储位置在/var/lib/docker ："></a>修改docker镜像和容器的存储位置，Docker默认的镜像和容器存储位置在/var/lib/docker ：</h4><img src="/2018/09/30/Docker-rancher/5_docker_info.png" title="查看docker信息"><p>编辑文件docker.service，使用-g参数指定存储位置</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /usr/<span class="class"><span class="keyword">lib</span>/<span class="title">systemd</span>/<span class="title">system</span>/<span class="title">docker</span>.<span class="title">service</span></span></span><br></pre></td></tr></table></figure><p>ExecStart=/usr/bin/dockerd下面添加如下内容 :</p><p>–graph  /data/tool/docker  #自定义存储目录</p><img src="/2018/09/30/Docker-rancher/docker_image_location.png" title="docker镜像自定义目录"><p>reload配置文件：systemctl daemon-reload</p><p>重启docker服务：systemctl restart docker</p><h4 id="查看linux信息"><a href="#查看linux信息" class="headerlink" title="查看linux信息"></a>查看linux信息</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看linux当前操作系统内核信息</span></span><br><span class="line">uname -a </span><br><span class="line"><span class="comment"># Linux查看当前操作系统版本信息</span></span><br><span class="line">cat /proc/version      </span><br><span class="line"><span class="comment"># Linux查看cpu相关信息，包括型号、主频、内核信息等</span></span><br><span class="line">cat /proc/cpuinfo</span><br><span class="line">```                   </span><br><span class="line"></span><br><span class="line"><span class="comment">###  安装Rancher</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#### docker容器化部署：（[参考连接](https://rancher.com/docs/rancher/v1.6/zh/installing-rancher/installing-server/)）</span></span><br><span class="line"></span><br><span class="line"><span class="comment">##### 启动 RANCHER SERVER - 单容器部署 - 使用外部数据库：</span></span><br><span class="line"></span><br><span class="line">```bash</span><br><span class="line">docker run -d --restart=unless-stopped -p 8080:8080 rancher/server \</span><br><span class="line">      --db-host 192.168.0.14 \</span><br><span class="line">      --db-port 3306 \</span><br><span class="line">      --db-user root \</span><br><span class="line">      --db-password Cobbler1234! \ </span><br><span class="line">      --db-name cattle</span><br></pre></td></tr></table></figure><p>cattle 是提前在192.168.0.14上建好的数据库；</p><ol><li>启动报错：exec: “docker-proxy”: executable file not found in $PATH 如图：<img src="/2018/09/30/Docker-rancher/7_docker_run_error.png"></li></ol><p>查看下 docker-proxy 的位置： <code>cat /usr/lib/systemd/system/docker.service | grep prox</code></p><p>创建一条软连接到 /usr/bin/ 下：<code>ln -s /usr/libexec/docker/docker-proxy-current  /usr/bin/docker-proxy</code></p><ol start="2"><li>启动报错2：Error response from daemon: shim error: docker-runc not installed on system，如图：<img src="/2018/09/30/Docker-rancher/9_docker_run_error.png"></li></ol><p>查看下 docker-runc 的位置：<code>cat/usr/lib/systemd/system/docker.service | grep runc</code></p><p>创建一条软连接到 /usr/bin/ 下： <code>ln -s /usr/libexec/docker/docker-runc-current /usr/bin/docker-runc</code></p><h5 id="启动-RANCHER-SERVER-单容器部署-NON-HA"><a href="#启动-RANCHER-SERVER-单容器部署-NON-HA" class="headerlink" title="启动 RANCHER SERVER - 单容器部署 (NON-HA)"></a>启动 RANCHER SERVER - 单容器部署 (NON-HA)</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --restart=unless-stopped -p 8080:8080 rancher/server</span><br></pre></td></tr></table></figure><p>启动报错：iptables failed: iptables –wait -t nat -A DOCKER -p tcp -d 0/0 –dport 8080 -j DNAT –to-destination 172.17.0.2:8080 ! -i docker0: iptables: No chain/target/match by that name.如图：<br><img src="/2018/09/30/Docker-rancher/10_docker_run_error.png"></p><p>处理报错：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 先看能不能ping通网络。若能依次执行以下命令:</span></span><br><span class="line">pkill docker</span><br><span class="line">iptables -t nat -F</span><br><span class="line">ifconfig docker0 down</span><br><span class="line">brctl delbr docker0</span><br><span class="line">docker -d</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启docker服务</span></span><br><span class="line">systmctl restart docker</span><br></pre></td></tr></table></figure></p><p>重启后，查看docker 容器： <code>docker ps -a</code>  如图：<br><img src="/2018/09/30/Docker-rancher/11_docker_run_success.png"></p><p>启动成功，访问<a href="http://192.168.0.93:8080（部署服务器地址:端口）,如图：" target="_blank" rel="noopener">http://192.168.0.93:8080（部署服务器地址:端口）,如图：</a><br><img src="/2018/09/30/Docker-rancher/12_docker_manage_index.png" title="管理界面"></p><h5 id="配置RANCHER"><a href="#配置RANCHER" class="headerlink" title="配置RANCHER"></a>配置RANCHER</h5><ul><li>访问控制：<img src="/2018/09/30/Docker-rancher/13_manage_controll.png" title="访问控制"></li></ul><p>目前选择本地身份认证（<a href="https://rancher.com/docs/rancher/v1.6/zh/configuration/access-control/#section-3" target="_blank" rel="noopener">参考链接</a>）：<br>账户/密码：admin/123456</p><ul><li>添加主机<img src="/2018/09/30/Docker-rancher/13_manage_add_host.png" title="添加主机"></li></ul><h3 id="部署私有仓库-Docker-Registry"><a href="#部署私有仓库-Docker-Registry" class="headerlink" title="部署私有仓库 Docker Registry"></a>部署私有仓库 Docker Registry</h3><h4 id="安装运行-docker-registry"><a href="#安装运行-docker-registry" class="headerlink" title="安装运行 docker-registry"></a>安装运行 docker-registry</h4><ul><li><strong><em>默认安装</em></strong></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 5000:5000 --restart=always --name registry registry</span><br></pre></td></tr></table></figure><p>使用官方的 registry 镜像来启动私有仓库。默认情况下，仓库会被创建在<strong><em>容器</em></strong>的 /var/lib/registry 目录下;</p><ul><li><strong><em>指定仓库目录安装</em></strong></li></ul><p>通过 <code>-v</code> 参数来将镜像文件存放在本地的指定路径 :</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p <span class="number">5000</span>:<span class="number">5000</span> -v /data/tool/docker/<span class="symbol">registry:</span>/var/<span class="class"><span class="keyword">lib</span>/<span class="title">registry</span> <span class="title">registry</span></span></span><br></pre></td></tr></table></figure><h4 id="查看系统当前的镜像："><a href="#查看系统当前的镜像：" class="headerlink" title="查看系统当前的镜像："></a>查看系统当前的镜像：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure><img src="/2018/09/30/Docker-rancher/14_docker_tag.png" title="添加主机"><h4 id="使用-docker-tag-来标记一个镜像，然后推送它到仓库。例如私有仓库地址为-127-0-0-1-5000"><a href="#使用-docker-tag-来标记一个镜像，然后推送它到仓库。例如私有仓库地址为-127-0-0-1-5000" class="headerlink" title="使用 docker tag 来标记一个镜像，然后推送它到仓库。例如私有仓库地址为 127.0.0.1:5000"></a>使用 <code>docker tag</code> 来标记一个镜像，然后推送它到仓库。例如私有仓库地址为 <code>127.0.0.1:5000</code></h4><p>格式为 <code>docker tag IMAGE[:TAG] [REGISTRY_HOST[:REGISTRY_PORT]/]REPOSITORY[:TAG]</code>  </p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="keyword">tag</span> <span class="title">a0b9e05b2a03</span>  <span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">5000</span>/rancher_server:version1.<span class="number">0</span></span><br></pre></td></tr></table></figure><p>如上图，多了一个rancher/server 镜像 tag 为 version1.0</p><p>上传到私有仓库：<code>docker push 127.0.0.1:5000/rancher_server:version1.0</code></p><h4 id="用-curl-查看仓库中的镜像-：curl-127-0-0-1-5000-v2-catalog"><a href="#用-curl-查看仓库中的镜像-：curl-127-0-0-1-5000-v2-catalog" class="headerlink" title="用 curl 查看仓库中的镜像 ：curl 127.0.0.1:5000/v2/_catalog"></a>用 <code>curl</code> 查看仓库中的镜像 ：<code>curl 127.0.0.1:5000/v2/_catalog</code></h4><img src="/2018/09/30/Docker-rancher/14_docker_registry_1.png" title="查看仓库"><p>直接在浏览器访问查看：<br><img src="/2018/09/30/Docker-rancher/14_docker_registry_2.png" title="访问主页"></p><hr><h3 id="【以下是基于本地win10系统安装docker后构建docker镜像】"><a href="#【以下是基于本地win10系统安装docker后构建docker镜像】" class="headerlink" title="【以下是基于本地win10系统安装docker后构建docker镜像】"></a>【以下是基于本地win10系统安装docker后构建docker镜像】</h3><p>备注：下文中镜像仓库ip地址修改为 192.168.0.94</p><h4 id="使用Dockerfile文件构建镜像"><a href="#使用Dockerfile文件构建镜像" class="headerlink" title="使用Dockerfile文件构建镜像"></a>使用Dockerfile文件构建镜像</h4><ul><li>编写Dockerfile文件</li></ul><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> java:<span class="number">8</span></span><br><span class="line"><span class="keyword">VOLUME</span><span class="bash"> /data/container</span></span><br><span class="line"><span class="bash">ADD magic-eureka-center-0.0.1-SNAPSHOT.jar app.jar</span></span><br><span class="line"><span class="bash">RUN bash -c <span class="string">'touch /app.jar'</span></span></span><br><span class="line"><span class="bash">EXPOSE 8761</span></span><br><span class="line"><span class="bash">ENTRYPOINT [<span class="string">"java"</span>,<span class="string">"-Djava.security.egd=file:/dev/./urandom"</span>,<span class="string">"-jar"</span>,<span class="string">"/app.jar"</span>]</span></span><br></pre></td></tr></table></figure><ul><li>docker build构建镜像<br>格式：docker build -t  仓库名称/镜像名称[:标签]   Dockerfile的相对位置<figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">docker</span> <span class="keyword">build </span>-t magic/eureka:<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span> .</span><br></pre></td></tr></table></figure></li></ul><img src="/2018/09/30/Docker-rancher/docker_build.png"><ul><li>查看镜像</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure><img src="/2018/09/30/Docker-rancher/docker_images.png"><h4 id="使用maven插件构建镜像"><a href="#使用maven插件构建镜像" class="headerlink" title="使用maven插件构建镜像"></a>使用maven插件构建镜像</h4><p>在pom.xml文件增加插件：</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.spotify<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>docker-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.4.13<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">imageName</span>&gt;</span>$</span><span class="template-variable">&#123;project.artifactId&#125;</span><span class="xml">:$</span><span class="template-variable">&#123;core.version&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">imageName</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">dockerDirectory</span>&gt;</span>$</span><span class="template-variable">&#123;project.basedir&#125;</span><span class="xml">/src/main/docker<span class="tag">&lt;/<span class="name">dockerDirectory</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">targetPath</span>&gt;</span>/<span class="tag">&lt;/<span class="name">targetPath</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">directory</span>&gt;</span>$</span><span class="template-variable">&#123;project.build.directory&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>$</span><span class="template-variable">&#123;project.build.finalName&#125;</span><span class="xml">.jar<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>在/src/main/docker目录下新建Dockerfile</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> java:<span class="number">8</span></span><br><span class="line"><span class="keyword">VOLUME</span><span class="bash"> /data/container</span></span><br><span class="line"><span class="bash">ADD magic-eureka-center-0.0.1-SNAPSHOT.jar app.jar</span></span><br><span class="line"><span class="bash">RUN bash -c <span class="string">'touch /app.jar'</span></span></span><br><span class="line"><span class="bash">EXPOSE 8761</span></span><br><span class="line"><span class="bash">ENTRYPOINT [<span class="string">"java"</span>,<span class="string">"-Djava.security.egd=file:/dev/./urandom"</span>,<span class="string">"-jar"</span>,<span class="string">"/app.jar"</span>]</span></span><br></pre></td></tr></table></figure><p>子模块根目录下 magic-eureka-center/  使用命令构建，运行命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn clean package docker:build</span><br></pre></td></tr></table></figure><p>或者 通过IDEA 配置：<br><img src="/2018/09/30/Docker-rancher/maven_docker_build.png"><br>在控制台Console可以看到构建成功后的输出信息;<br>使用 <code>docker images</code> 查看新构建的镜像;</p><h4 id="上传镜像私有Docker-Registry"><a href="#上传镜像私有Docker-Registry" class="headerlink" title="上传镜像私有Docker Registry"></a>上传镜像私有Docker Registry</h4><ul><li><p>为本地镜像打标签</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker tag magic/eureka:0.0.1 192.168.0.94:5000/magic/eureka:0.0.1</span><br></pre></td></tr></table></figure></li><li><p>push到仓库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker push 192.168.0.94:5000/magic/eureka:0.0.1</span><br></pre></td></tr></table></figure></li></ul><p>有点不顺利~~~，报错如下：</p><img src="/2018/09/30/Docker-rancher/docker_push_error.png"><p>错误信息：Get <a href="https://192.168.0.94:5000/v2/" target="_blank" rel="noopener">https://192.168.0.94:5000/v2/</a>: http: server gave HTTP response to HTTPS client</p><p>查询错误原因：<a href="https://www.cnblogs.com/hobinly/p/6110624.html" target="_blank" rel="noopener">参考博客</a></p><img src="/2018/09/30/Docker-rancher/docker_push_solution.png"><p>根据以上信息，我修改了本地【win10】docker的daemon.json文件 ，再重启服务： </p><img src="/2018/09/30/Docker-rancher/docker_daemon.png"><p>重新push就可以了，如图：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker push 192.168.0.94:5000/magic/eureka:0.0.1</span><br></pre></td></tr></table></figure><img src="/2018/09/30/Docker-rancher/docker_push_ok.png"><h4 id="从私有docker仓库pull镜像-启动服务"><a href="#从私有docker仓库pull镜像-启动服务" class="headerlink" title="从私有docker仓库pull镜像,启动服务"></a>从私有docker仓库pull镜像,启动服务</h4><p>在192.168.0.94机器上从私有docker镜像仓库获取之前上传的镜像，再运行</p><ul><li>pull镜像<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull 192.168.0.94:5000/magic/eureka:0.0.1</span><br></pre></td></tr></table></figure></li></ul><img src="/2018/09/30/Docker-rancher/docker_pull_image.png"><p>地址上加http协议报错：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull http://192.168.0.94:5000/magic/eureka:0.0.1 <span class="comment">#错误</span></span><br></pre></td></tr></table></figure></p><img src="/2018/09/30/Docker-rancher/docker_pull_error.png"><ul><li>运行镜像</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 8761:8761 192.168.0.94:5000/magic/eureka:0.0.1</span><br></pre></td></tr></table></figure><img src="/2018/09/30/Docker-rancher/docker_run_ok.png"><p>查看运行中的容器：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps</span><br></pre></td></tr></table></figure></p><img src="/2018/09/30/Docker-rancher/docker_ps.png"><h4 id="使用Docker-Compose-工具编排微服务"><a href="#使用Docker-Compose-工具编排微服务" class="headerlink" title="使用Docker-Compose 工具编排微服务"></a>使用Docker-Compose 工具编排微服务</h4><ul><li><p>安装docker-compose  <a href="https://docs.docker.com/compose/install/#install-compose" target="_blank" rel="noopener">参考地址</a></p><ul><li><p>下载最新版本docker-compose</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -L <span class="string">"https://github.com/docker/compose/releases/download/1.22.0/docker-compose-<span class="variable">$(uname -s)</span>-<span class="variable">$(uname -m)</span>"</span> -o /usr/<span class="built_in">local</span>/bin/docker-compose</span><br></pre></td></tr></table></figure></li><li><p>添加执行权限</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chmod +x /usr/<span class="built_in">local</span>/bin/docker-compose</span><br></pre></td></tr></table></figure></li><li><p>安装完成</p><img src="/2018/09/30/Docker-rancher/docker-compose-success.png"></li></ul></li></ul><ul><li><p>安装docker-compose命令补全工具（输入docker-compose后按Tab键提示）<br><a href="https://docs.docker.com/compose/completion/" target="_blank" rel="noopener">参考地址</a><br>运行如下命令，重新连接终端即可生效</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo curl -L https://raw.githubusercontent.com/docker/compose/1.22.0/contrib/completion/bash/docker-compose -o /etc/bash_completion.d/docker-compose</span><br></pre></td></tr></table></figure></li><li><p>编写docker-compose.yml文件：<br>目录结构：</p><img src="/2018/09/30/Docker-rancher/docker-compose-mulu.png"></li></ul><p>docker-compose.yml 代码:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 表示该docker-compose.yml文件使用的是Version 2 file format</span></span><br><span class="line">version: <span class="string">'2'</span></span><br><span class="line"><span class="comment"># Version 2 file format 的固定写法，为project定义服务</span></span><br><span class="line">services:</span><br><span class="line"><span class="comment"># 指定服务名称</span></span><br><span class="line">eureka:</span><br><span class="line">  <span class="comment"># replace username/repo:tag with your name and image details</span></span><br><span class="line">  <span class="comment">#image: username/repo:tag</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># build构建镜像，Dockerfile文件相对地址</span></span><br><span class="line">  build: .</span><br><span class="line"></span><br><span class="line">  <span class="comment"># 暴露端口</span></span><br><span class="line">  ports:</span><br><span class="line">  - <span class="string">"8761:8761"</span></span><br><span class="line">  expose:</span><br><span class="line">  - 8761</span><br></pre></td></tr></table></figure><p>Dockerfile文件代码：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> java:<span class="number">8</span></span><br><span class="line"><span class="keyword">VOLUME</span><span class="bash"> /data/container</span></span><br><span class="line"><span class="bash">ADD target/magic-eureka-center-0.0.1-SNAPSHOT.jar app.jar</span></span><br><span class="line"><span class="bash">RUN bash -c <span class="string">'touch /app.jar'</span></span></span><br><span class="line"><span class="bash">EXPOSE 8761</span></span><br><span class="line"><span class="bash">ENTRYPOINT [<span class="string">"java"</span>,<span class="string">"-Djava.security.egd=file:/dev/./urandom"</span>,<span class="string">"-jar"</span>,<span class="string">"/app.jar"</span>]</span></span><br></pre></td></tr></table></figure><p>运行构建:<code>docker-compose up</code>  </p><p>后台运行构建: <code>docker-compose up -d</code> </p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;摘要：本次操作基于CentOS 7部署&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;安装Docker&quot;&gt;&lt;a href=&quot;#安装Docker&quot; class=&quot;headerlink&quot; title=&quot;安装Docker&quot;&gt;&lt;/a&gt;安装Docker&lt;/h3&gt;&lt;h4 id=&quot;利用yum工具安装docker&quot;&gt;&lt;a href=&quot;#利用yum工具安装docker&quot; class=&quot;headerlink&quot; title=&quot;利用yum工具安装docker&quot;&gt;&lt;/a&gt;利用yum工具安装docker&lt;/h4&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;yum -y install docker&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Docker" scheme="http://aikaiqiang.coding.me/categories/Docker/"/>
    
    
      <category term="Docker" scheme="http://aikaiqiang.coding.me/tags/Docker/"/>
    
      <category term="Docker Registry" scheme="http://aikaiqiang.coding.me/tags/Docker-Registry/"/>
    
      <category term="Rancher" scheme="http://aikaiqiang.coding.me/tags/Rancher/"/>
    
  </entry>
  
  <entry>
    <title>名句摘录</title>
    <link href="http://aikaiqiang.coding.me/2018/09/29/Quotes/"/>
    <id>http://aikaiqiang.coding.me/2018/09/29/Quotes/</id>
    <published>2018-09-29T07:39:42.000Z</published>
    <updated>2019-02-20T08:23:43.893Z</updated>
    
    <content type="html"><![CDATA[<h3 id="名句摘录"><a href="#名句摘录" class="headerlink" title="名句摘录"></a>名句摘录</h3><blockquote><p>君子之行，动则思义，不为利回，不为义疚；</p></blockquote><blockquote><p>知足不辱，知止不殆，可以长久；</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;名句摘录&quot;&gt;&lt;a href=&quot;#名句摘录&quot; class=&quot;headerlink&quot; title=&quot;名句摘录&quot;&gt;&lt;/a&gt;名句摘录&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;君子之行，动则思义，不为利回，不为义疚；&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquot
      
    
    </summary>
    
      <category term="名句" scheme="http://aikaiqiang.coding.me/categories/%E5%90%8D%E5%8F%A5/"/>
    
    
      <category term="名句" scheme="http://aikaiqiang.coding.me/tags/%E5%90%8D%E5%8F%A5/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://aikaiqiang.coding.me/2018/09/10/Hello-world/"/>
    <id>http://aikaiqiang.coding.me/2018/09/10/Hello-world/</id>
    <published>2018-09-10T09:15:39.000Z</published>
    <updated>2019-02-20T08:23:43.893Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><a id="more"></a><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
    
    </summary>
    
      <category term="Hexo" scheme="http://aikaiqiang.coding.me/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="http://aikaiqiang.coding.me/tags/Hexo/"/>
    
  </entry>
  
</feed>
